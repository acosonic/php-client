<?php
/**
 * CartModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CartModel Class Doc Comment
 *
 * @category Class
 * @description Contains information about cart.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CartModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CartModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency' => '\OpenAPI\Client\Model\CalculatePriceResponseModelCurrency',
        'total_item_price' => 'float',
        'total_item_discount' => 'float',
        'total_item_discounted_price' => 'float',
        'total_shipping' => 'float',
        'shipping_taxable' => 'bool',
        'shipping_tax_rate' => 'float',
        'shipping_tax' => 'float',
        'total_item_tax' => 'float',
        'total_tax' => 'float',
        'total_without_discount' => 'float',
        'total' => 'float',
        'items' => '\OpenAPI\Client\Model\CartItemModel[]',
        'country' => '\OpenAPI\Client\Model\CartModelCountry',
        'state' => '\OpenAPI\Client\Model\CartModelState',
        'postal_code' => 'string',
        'calculate_tax_error' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency' => null,
        'total_item_price' => 'decimal',
        'total_item_discount' => 'decimal',
        'total_item_discounted_price' => 'decimal',
        'total_shipping' => 'decimal',
        'shipping_taxable' => null,
        'shipping_tax_rate' => 'decimal',
        'shipping_tax' => 'decimal',
        'total_item_tax' => 'decimal',
        'total_tax' => 'decimal',
        'total_without_discount' => 'decimal',
        'total' => 'decimal',
        'items' => null,
        'country' => null,
        'state' => null,
        'postal_code' => null,
        'calculate_tax_error' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'currency' => true,
		'total_item_price' => false,
		'total_item_discount' => false,
		'total_item_discounted_price' => false,
		'total_shipping' => false,
		'shipping_taxable' => true,
		'shipping_tax_rate' => true,
		'shipping_tax' => true,
		'total_item_tax' => true,
		'total_tax' => true,
		'total_without_discount' => false,
		'total' => false,
		'items' => true,
		'country' => true,
		'state' => true,
		'postal_code' => true,
		'calculate_tax_error' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'total_item_price' => 'totalItemPrice',
        'total_item_discount' => 'totalItemDiscount',
        'total_item_discounted_price' => 'totalItemDiscountedPrice',
        'total_shipping' => 'totalShipping',
        'shipping_taxable' => 'shippingTaxable',
        'shipping_tax_rate' => 'shippingTaxRate',
        'shipping_tax' => 'shippingTax',
        'total_item_tax' => 'totalItemTax',
        'total_tax' => 'totalTax',
        'total_without_discount' => 'totalWithoutDiscount',
        'total' => 'total',
        'items' => 'items',
        'country' => 'country',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'calculate_tax_error' => 'calculateTaxError'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'total_item_price' => 'setTotalItemPrice',
        'total_item_discount' => 'setTotalItemDiscount',
        'total_item_discounted_price' => 'setTotalItemDiscountedPrice',
        'total_shipping' => 'setTotalShipping',
        'shipping_taxable' => 'setShippingTaxable',
        'shipping_tax_rate' => 'setShippingTaxRate',
        'shipping_tax' => 'setShippingTax',
        'total_item_tax' => 'setTotalItemTax',
        'total_tax' => 'setTotalTax',
        'total_without_discount' => 'setTotalWithoutDiscount',
        'total' => 'setTotal',
        'items' => 'setItems',
        'country' => 'setCountry',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'calculate_tax_error' => 'setCalculateTaxError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'total_item_price' => 'getTotalItemPrice',
        'total_item_discount' => 'getTotalItemDiscount',
        'total_item_discounted_price' => 'getTotalItemDiscountedPrice',
        'total_shipping' => 'getTotalShipping',
        'shipping_taxable' => 'getShippingTaxable',
        'shipping_tax_rate' => 'getShippingTaxRate',
        'shipping_tax' => 'getShippingTax',
        'total_item_tax' => 'getTotalItemTax',
        'total_tax' => 'getTotalTax',
        'total_without_discount' => 'getTotalWithoutDiscount',
        'total' => 'getTotal',
        'items' => 'getItems',
        'country' => 'getCountry',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'calculate_tax_error' => 'getCalculateTaxError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('total_item_price', $data ?? [], null);
        $this->setIfExists('total_item_discount', $data ?? [], null);
        $this->setIfExists('total_item_discounted_price', $data ?? [], null);
        $this->setIfExists('total_shipping', $data ?? [], null);
        $this->setIfExists('shipping_taxable', $data ?? [], null);
        $this->setIfExists('shipping_tax_rate', $data ?? [], null);
        $this->setIfExists('shipping_tax', $data ?? [], null);
        $this->setIfExists('total_item_tax', $data ?? [], null);
        $this->setIfExists('total_tax', $data ?? [], null);
        $this->setIfExists('total_without_discount', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('calculate_tax_error', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\CalculatePriceResponseModelCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\CalculatePriceResponseModelCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {

        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_item_price
     *
     * @return float|null
     */
    public function getTotalItemPrice()
    {
        return $this->container['total_item_price'];
    }

    /**
     * Sets total_item_price
     *
     * @param float|null $total_item_price Sum of all item prices before discount.
     *
     * @return self
     */
    public function setTotalItemPrice($total_item_price)
    {

        if (is_null($total_item_price)) {
            throw new \InvalidArgumentException('non-nullable total_item_price cannot be null');
        }

        $this->container['total_item_price'] = $total_item_price;

        return $this;
    }

    /**
     * Gets total_item_discount
     *
     * @return float|null
     */
    public function getTotalItemDiscount()
    {
        return $this->container['total_item_discount'];
    }

    /**
     * Sets total_item_discount
     *
     * @param float|null $total_item_discount Sum of all item discounts.
     *
     * @return self
     */
    public function setTotalItemDiscount($total_item_discount)
    {

        if (is_null($total_item_discount)) {
            throw new \InvalidArgumentException('non-nullable total_item_discount cannot be null');
        }

        $this->container['total_item_discount'] = $total_item_discount;

        return $this;
    }

    /**
     * Gets total_item_discounted_price
     *
     * @return float|null
     */
    public function getTotalItemDiscountedPrice()
    {
        return $this->container['total_item_discounted_price'];
    }

    /**
     * Sets total_item_discounted_price
     *
     * @param float|null $total_item_discounted_price Sum of all item prices after discount.
     *
     * @return self
     */
    public function setTotalItemDiscountedPrice($total_item_discounted_price)
    {

        if (is_null($total_item_discounted_price)) {
            throw new \InvalidArgumentException('non-nullable total_item_discounted_price cannot be null');
        }

        $this->container['total_item_discounted_price'] = $total_item_discounted_price;

        return $this;
    }

    /**
     * Gets total_shipping
     *
     * @return float|null
     */
    public function getTotalShipping()
    {
        return $this->container['total_shipping'];
    }

    /**
     * Sets total_shipping
     *
     * @param float|null $total_shipping Total shipping for all items.
     *
     * @return self
     */
    public function setTotalShipping($total_shipping)
    {

        if (is_null($total_shipping)) {
            throw new \InvalidArgumentException('non-nullable total_shipping cannot be null');
        }

        $this->container['total_shipping'] = $total_shipping;

        return $this;
    }

    /**
     * Gets shipping_taxable
     *
     * @return bool|null
     */
    public function getShippingTaxable()
    {
        return $this->container['shipping_taxable'];
    }

    /**
     * Sets shipping_taxable
     *
     * @param bool|null $shipping_taxable Indicates if shipping is taxable.
     *
     * @return self
     */
    public function setShippingTaxable($shipping_taxable)
    {

        if (is_null($shipping_taxable)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_taxable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_taxable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['shipping_taxable'] = $shipping_taxable;

        return $this;
    }

    /**
     * Gets shipping_tax_rate
     *
     * @return float|null
     */
    public function getShippingTaxRate()
    {
        return $this->container['shipping_tax_rate'];
    }

    /**
     * Sets shipping_tax_rate
     *
     * @param float|null $shipping_tax_rate Overall sales tax rate for shipping.
     *
     * @return self
     */
    public function setShippingTaxRate($shipping_tax_rate)
    {

        if (is_null($shipping_tax_rate)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_tax_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_tax_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['shipping_tax_rate'] = $shipping_tax_rate;

        return $this;
    }

    /**
     * Gets shipping_tax
     *
     * @return float|null
     */
    public function getShippingTax()
    {
        return $this->container['shipping_tax'];
    }

    /**
     * Sets shipping_tax
     *
     * @param float|null $shipping_tax Amount of sales tax to collect for shipping.
     *
     * @return self
     */
    public function setShippingTax($shipping_tax)
    {

        if (is_null($shipping_tax)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['shipping_tax'] = $shipping_tax;

        return $this;
    }

    /**
     * Gets total_item_tax
     *
     * @return float|null
     */
    public function getTotalItemTax()
    {
        return $this->container['total_item_tax'];
    }

    /**
     * Sets total_item_tax
     *
     * @param float|null $total_item_tax Amount of sales tax to collect for all items.
     *
     * @return self
     */
    public function setTotalItemTax($total_item_tax)
    {

        if (is_null($total_item_tax)) {
            array_push($this->openAPINullablesSetToNull, 'total_item_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_item_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['total_item_tax'] = $total_item_tax;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return float|null
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param float|null $total_tax Total sales tax amount.
     *
     * @return self
     */
    public function setTotalTax($total_tax)
    {

        if (is_null($total_tax)) {
            array_push($this->openAPINullablesSetToNull, 'total_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_without_discount
     *
     * @return float|null
     */
    public function getTotalWithoutDiscount()
    {
        return $this->container['total_without_discount'];
    }

    /**
     * Sets total_without_discount
     *
     * @param float|null $total_without_discount Total order without discount after taxes.
     *
     * @return self
     */
    public function setTotalWithoutDiscount($total_without_discount)
    {

        if (is_null($total_without_discount)) {
            throw new \InvalidArgumentException('non-nullable total_without_discount cannot be null');
        }

        $this->container['total_without_discount'] = $total_without_discount;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total Total order amount after taxes.
     *
     * @return self
     */
    public function setTotal($total)
    {

        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }

        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\CartItemModel[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\CartItemModel[]|null $items Cart items.
     *
     * @return self
     */
    public function setItems($items)
    {

        if (is_null($items)) {
            array_push($this->openAPINullablesSetToNull, 'items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \OpenAPI\Client\Model\CartModelCountry|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \OpenAPI\Client\Model\CartModelCountry|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {

        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\CartModelState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\CartModelState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code used for tax calculation.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {

        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets calculate_tax_error
     *
     * @return string|null
     */
    public function getCalculateTaxError()
    {
        return $this->container['calculate_tax_error'];
    }

    /**
     * Sets calculate_tax_error
     *
     * @param string|null $calculate_tax_error Error message if tax not calculated.
     *
     * @return self
     */
    public function setCalculateTaxError($calculate_tax_error)
    {

        if (is_null($calculate_tax_error)) {
            array_push($this->openAPINullablesSetToNull, 'calculate_tax_error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('calculate_tax_error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['calculate_tax_error'] = $calculate_tax_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


