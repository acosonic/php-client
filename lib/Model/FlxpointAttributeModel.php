<?php
/**
 * FlxpointAttributeModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FlxpointAttributeModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlxpointAttributeModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlxpointAttributeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inventory_parent_id' => 'int',
        'id' => 'int',
        'attribute_id' => 'int',
        'attribute_value_id' => 'int',
        'name' => 'string',
        'original_inventory_name' => 'string',
        'value' => 'string',
        'original_inventory_value' => 'string',
        'is_private' => 'bool',
        'merge_to_attribute_id' => 'int',
        'merge_to_attribute_value_id' => 'int',
        'merge_to_attribute_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inventory_parent_id' => 'int32',
        'id' => 'int32',
        'attribute_id' => 'int32',
        'attribute_value_id' => 'int32',
        'name' => null,
        'original_inventory_name' => null,
        'value' => null,
        'original_inventory_value' => null,
        'is_private' => null,
        'merge_to_attribute_id' => 'int32',
        'merge_to_attribute_value_id' => 'int32',
        'merge_to_attribute_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inventory_parent_id' => false,
		'id' => false,
		'attribute_id' => false,
		'attribute_value_id' => false,
		'name' => true,
		'original_inventory_name' => true,
		'value' => true,
		'original_inventory_value' => true,
		'is_private' => false,
		'merge_to_attribute_id' => true,
		'merge_to_attribute_value_id' => true,
		'merge_to_attribute_value' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory_parent_id' => 'inventoryParentId',
        'id' => 'id',
        'attribute_id' => 'attributeId',
        'attribute_value_id' => 'attributeValueId',
        'name' => 'name',
        'original_inventory_name' => 'originalInventoryName',
        'value' => 'value',
        'original_inventory_value' => 'originalInventoryValue',
        'is_private' => 'isPrivate',
        'merge_to_attribute_id' => 'mergeToAttributeId',
        'merge_to_attribute_value_id' => 'mergeToAttributeValueId',
        'merge_to_attribute_value' => 'mergeToAttributeValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory_parent_id' => 'setInventoryParentId',
        'id' => 'setId',
        'attribute_id' => 'setAttributeId',
        'attribute_value_id' => 'setAttributeValueId',
        'name' => 'setName',
        'original_inventory_name' => 'setOriginalInventoryName',
        'value' => 'setValue',
        'original_inventory_value' => 'setOriginalInventoryValue',
        'is_private' => 'setIsPrivate',
        'merge_to_attribute_id' => 'setMergeToAttributeId',
        'merge_to_attribute_value_id' => 'setMergeToAttributeValueId',
        'merge_to_attribute_value' => 'setMergeToAttributeValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory_parent_id' => 'getInventoryParentId',
        'id' => 'getId',
        'attribute_id' => 'getAttributeId',
        'attribute_value_id' => 'getAttributeValueId',
        'name' => 'getName',
        'original_inventory_name' => 'getOriginalInventoryName',
        'value' => 'getValue',
        'original_inventory_value' => 'getOriginalInventoryValue',
        'is_private' => 'getIsPrivate',
        'merge_to_attribute_id' => 'getMergeToAttributeId',
        'merge_to_attribute_value_id' => 'getMergeToAttributeValueId',
        'merge_to_attribute_value' => 'getMergeToAttributeValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inventory_parent_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('attribute_id', $data ?? [], null);
        $this->setIfExists('attribute_value_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('original_inventory_name', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('original_inventory_value', $data ?? [], null);
        $this->setIfExists('is_private', $data ?? [], null);
        $this->setIfExists('merge_to_attribute_id', $data ?? [], null);
        $this->setIfExists('merge_to_attribute_value_id', $data ?? [], null);
        $this->setIfExists('merge_to_attribute_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory_parent_id
     *
     * @return int|null
     */
    public function getInventoryParentId()
    {
        return $this->container['inventory_parent_id'];
    }

    /**
     * Sets inventory_parent_id
     *
     * @param int|null $inventory_parent_id inventory_parent_id
     *
     * @return self
     */
    public function setInventoryParentId($inventory_parent_id)
    {

        if (is_null($inventory_parent_id)) {
            throw new \InvalidArgumentException('non-nullable inventory_parent_id cannot be null');
        }

        $this->container['inventory_parent_id'] = $inventory_parent_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets attribute_id
     *
     * @return int|null
     */
    public function getAttributeId()
    {
        return $this->container['attribute_id'];
    }

    /**
     * Sets attribute_id
     *
     * @param int|null $attribute_id attribute_id
     *
     * @return self
     */
    public function setAttributeId($attribute_id)
    {

        if (is_null($attribute_id)) {
            throw new \InvalidArgumentException('non-nullable attribute_id cannot be null');
        }

        $this->container['attribute_id'] = $attribute_id;

        return $this;
    }

    /**
     * Gets attribute_value_id
     *
     * @return int|null
     */
    public function getAttributeValueId()
    {
        return $this->container['attribute_value_id'];
    }

    /**
     * Sets attribute_value_id
     *
     * @param int|null $attribute_value_id attribute_value_id
     *
     * @return self
     */
    public function setAttributeValueId($attribute_value_id)
    {

        if (is_null($attribute_value_id)) {
            throw new \InvalidArgumentException('non-nullable attribute_value_id cannot be null');
        }

        $this->container['attribute_value_id'] = $attribute_value_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_inventory_name
     *
     * @return string|null
     */
    public function getOriginalInventoryName()
    {
        return $this->container['original_inventory_name'];
    }

    /**
     * Sets original_inventory_name
     *
     * @param string|null $original_inventory_name original_inventory_name
     *
     * @return self
     */
    public function setOriginalInventoryName($original_inventory_name)
    {

        if (is_null($original_inventory_name)) {
            array_push($this->openAPINullablesSetToNull, 'original_inventory_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_inventory_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['original_inventory_name'] = $original_inventory_name;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {

        if (is_null($value)) {
            array_push($this->openAPINullablesSetToNull, 'value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets original_inventory_value
     *
     * @return string|null
     */
    public function getOriginalInventoryValue()
    {
        return $this->container['original_inventory_value'];
    }

    /**
     * Sets original_inventory_value
     *
     * @param string|null $original_inventory_value original_inventory_value
     *
     * @return self
     */
    public function setOriginalInventoryValue($original_inventory_value)
    {

        if (is_null($original_inventory_value)) {
            array_push($this->openAPINullablesSetToNull, 'original_inventory_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_inventory_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['original_inventory_value'] = $original_inventory_value;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool|null
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool|null $is_private is_private
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {

        if (is_null($is_private)) {
            throw new \InvalidArgumentException('non-nullable is_private cannot be null');
        }

        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets merge_to_attribute_id
     *
     * @return int|null
     */
    public function getMergeToAttributeId()
    {
        return $this->container['merge_to_attribute_id'];
    }

    /**
     * Sets merge_to_attribute_id
     *
     * @param int|null $merge_to_attribute_id merge_to_attribute_id
     *
     * @return self
     */
    public function setMergeToAttributeId($merge_to_attribute_id)
    {

        if (is_null($merge_to_attribute_id)) {
            array_push($this->openAPINullablesSetToNull, 'merge_to_attribute_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merge_to_attribute_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['merge_to_attribute_id'] = $merge_to_attribute_id;

        return $this;
    }

    /**
     * Gets merge_to_attribute_value_id
     *
     * @return int|null
     */
    public function getMergeToAttributeValueId()
    {
        return $this->container['merge_to_attribute_value_id'];
    }

    /**
     * Sets merge_to_attribute_value_id
     *
     * @param int|null $merge_to_attribute_value_id merge_to_attribute_value_id
     *
     * @return self
     */
    public function setMergeToAttributeValueId($merge_to_attribute_value_id)
    {

        if (is_null($merge_to_attribute_value_id)) {
            array_push($this->openAPINullablesSetToNull, 'merge_to_attribute_value_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merge_to_attribute_value_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['merge_to_attribute_value_id'] = $merge_to_attribute_value_id;

        return $this;
    }

    /**
     * Gets merge_to_attribute_value
     *
     * @return string|null
     */
    public function getMergeToAttributeValue()
    {
        return $this->container['merge_to_attribute_value'];
    }

    /**
     * Sets merge_to_attribute_value
     *
     * @param string|null $merge_to_attribute_value merge_to_attribute_value
     *
     * @return self
     */
    public function setMergeToAttributeValue($merge_to_attribute_value)
    {

        if (is_null($merge_to_attribute_value)) {
            array_push($this->openAPINullablesSetToNull, 'merge_to_attribute_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merge_to_attribute_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['merge_to_attribute_value'] = $merge_to_attribute_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


