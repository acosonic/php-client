<?php
/**
 * FlxpointInventoryProductModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FlxpointInventoryProductModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlxpointInventoryProductModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlxpointInventoryProductModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'source_id' => 'int',
        'restricted' => 'bool',
        'variant_count' => 'int',
        'id' => 'int',
        'account_id' => 'int',
        'sku' => 'string',
        'title' => 'string',
        'description' => 'string',
        'manufacturer' => 'string',
        'inserted_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'archived' => 'bool',
        'category_one' => '\OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne',
        'category_two' => '\OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne',
        'category_three' => '\OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne',
        'images' => '\OpenAPI\Client\Model\FlxpointImageModel[]',
        'options' => '\OpenAPI\Client\Model\FlxpointOptionModel[]',
        'attributes' => '\OpenAPI\Client\Model\FlxpointAttributeModel[]',
        'custom_fields' => '\OpenAPI\Client\Model\FlxpointCustomFieldModel[]',
        'variants' => '\OpenAPI\Client\Model\FlxpointInventoryVariantModel[]',
        'category_one_id' => 'int',
        'category_two_id' => 'int',
        'category_three_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'source_id' => 'int32',
        'restricted' => null,
        'variant_count' => 'int32',
        'id' => 'int32',
        'account_id' => 'int32',
        'sku' => null,
        'title' => null,
        'description' => null,
        'manufacturer' => null,
        'inserted_at' => 'date-time',
        'updated_at' => 'date-time',
        'archived' => null,
        'category_one' => null,
        'category_two' => null,
        'category_three' => null,
        'images' => null,
        'options' => null,
        'attributes' => null,
        'custom_fields' => null,
        'variants' => null,
        'category_one_id' => 'int32',
        'category_two_id' => 'int32',
        'category_three_id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'source_id' => false,
		'restricted' => false,
		'variant_count' => false,
		'id' => false,
		'account_id' => false,
		'sku' => true,
		'title' => true,
		'description' => true,
		'manufacturer' => true,
		'inserted_at' => false,
		'updated_at' => true,
		'archived' => false,
		'category_one' => true,
		'category_two' => true,
		'category_three' => true,
		'images' => true,
		'options' => true,
		'attributes' => true,
		'custom_fields' => true,
		'variants' => true,
		'category_one_id' => true,
		'category_two_id' => true,
		'category_three_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source_id' => 'sourceId',
        'restricted' => 'restricted',
        'variant_count' => 'variantCount',
        'id' => 'id',
        'account_id' => 'accountId',
        'sku' => 'sku',
        'title' => 'title',
        'description' => 'description',
        'manufacturer' => 'manufacturer',
        'inserted_at' => 'insertedAt',
        'updated_at' => 'updatedAt',
        'archived' => 'archived',
        'category_one' => 'categoryOne',
        'category_two' => 'categoryTwo',
        'category_three' => 'categoryThree',
        'images' => 'images',
        'options' => 'options',
        'attributes' => 'attributes',
        'custom_fields' => 'customFields',
        'variants' => 'variants',
        'category_one_id' => 'categoryOneId',
        'category_two_id' => 'categoryTwoId',
        'category_three_id' => 'categoryThreeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source_id' => 'setSourceId',
        'restricted' => 'setRestricted',
        'variant_count' => 'setVariantCount',
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'sku' => 'setSku',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'manufacturer' => 'setManufacturer',
        'inserted_at' => 'setInsertedAt',
        'updated_at' => 'setUpdatedAt',
        'archived' => 'setArchived',
        'category_one' => 'setCategoryOne',
        'category_two' => 'setCategoryTwo',
        'category_three' => 'setCategoryThree',
        'images' => 'setImages',
        'options' => 'setOptions',
        'attributes' => 'setAttributes',
        'custom_fields' => 'setCustomFields',
        'variants' => 'setVariants',
        'category_one_id' => 'setCategoryOneId',
        'category_two_id' => 'setCategoryTwoId',
        'category_three_id' => 'setCategoryThreeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source_id' => 'getSourceId',
        'restricted' => 'getRestricted',
        'variant_count' => 'getVariantCount',
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'sku' => 'getSku',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'manufacturer' => 'getManufacturer',
        'inserted_at' => 'getInsertedAt',
        'updated_at' => 'getUpdatedAt',
        'archived' => 'getArchived',
        'category_one' => 'getCategoryOne',
        'category_two' => 'getCategoryTwo',
        'category_three' => 'getCategoryThree',
        'images' => 'getImages',
        'options' => 'getOptions',
        'attributes' => 'getAttributes',
        'custom_fields' => 'getCustomFields',
        'variants' => 'getVariants',
        'category_one_id' => 'getCategoryOneId',
        'category_two_id' => 'getCategoryTwoId',
        'category_three_id' => 'getCategoryThreeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('restricted', $data ?? [], null);
        $this->setIfExists('variant_count', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('inserted_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('category_one', $data ?? [], null);
        $this->setIfExists('category_two', $data ?? [], null);
        $this->setIfExists('category_three', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('variants', $data ?? [], null);
        $this->setIfExists('category_one_id', $data ?? [], null);
        $this->setIfExists('category_two_id', $data ?? [], null);
        $this->setIfExists('category_three_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source_id
     *
     * @return int|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param int|null $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {

        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }

        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets restricted
     *
     * @return bool|null
     */
    public function getRestricted()
    {
        return $this->container['restricted'];
    }

    /**
     * Sets restricted
     *
     * @param bool|null $restricted restricted
     *
     * @return self
     */
    public function setRestricted($restricted)
    {

        if (is_null($restricted)) {
            throw new \InvalidArgumentException('non-nullable restricted cannot be null');
        }

        $this->container['restricted'] = $restricted;

        return $this;
    }

    /**
     * Gets variant_count
     *
     * @return int|null
     */
    public function getVariantCount()
    {
        return $this->container['variant_count'];
    }

    /**
     * Sets variant_count
     *
     * @param int|null $variant_count variant_count
     *
     * @return self
     */
    public function setVariantCount($variant_count)
    {

        if (is_null($variant_count)) {
            throw new \InvalidArgumentException('non-nullable variant_count cannot be null');
        }

        $this->container['variant_count'] = $variant_count;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {

        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {

        if (is_null($manufacturer)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets inserted_at
     *
     * @return \DateTime|null
     */
    public function getInsertedAt()
    {
        return $this->container['inserted_at'];
    }

    /**
     * Sets inserted_at
     *
     * @param \DateTime|null $inserted_at inserted_at
     *
     * @return self
     */
    public function setInsertedAt($inserted_at)
    {

        if (is_null($inserted_at)) {
            throw new \InvalidArgumentException('non-nullable inserted_at cannot be null');
        }

        $this->container['inserted_at'] = $inserted_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {

        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {

        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }

        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets category_one
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne|null
     */
    public function getCategoryOne()
    {
        return $this->container['category_one'];
    }

    /**
     * Sets category_one
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne|null $category_one category_one
     *
     * @return self
     */
    public function setCategoryOne($category_one)
    {

        if (is_null($category_one)) {
            array_push($this->openAPINullablesSetToNull, 'category_one');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_one', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category_one'] = $category_one;

        return $this;
    }

    /**
     * Gets category_two
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne|null
     */
    public function getCategoryTwo()
    {
        return $this->container['category_two'];
    }

    /**
     * Sets category_two
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne|null $category_two category_two
     *
     * @return self
     */
    public function setCategoryTwo($category_two)
    {

        if (is_null($category_two)) {
            array_push($this->openAPINullablesSetToNull, 'category_two');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_two', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category_two'] = $category_two;

        return $this;
    }

    /**
     * Gets category_three
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne|null
     */
    public function getCategoryThree()
    {
        return $this->container['category_three'];
    }

    /**
     * Sets category_three
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryProductModelCategoryOne|null $category_three category_three
     *
     * @return self
     */
    public function setCategoryThree($category_three)
    {

        if (is_null($category_three)) {
            array_push($this->openAPINullablesSetToNull, 'category_three');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_three', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category_three'] = $category_three;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\FlxpointImageModel[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\FlxpointImageModel[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {

        if (is_null($images)) {
            array_push($this->openAPINullablesSetToNull, 'images');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('images', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\FlxpointOptionModel[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\FlxpointOptionModel[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (is_null($options)) {
            array_push($this->openAPINullablesSetToNull, 'options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\FlxpointAttributeModel[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\FlxpointAttributeModel[]|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {

        if (is_null($attributes)) {
            array_push($this->openAPINullablesSetToNull, 'attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \OpenAPI\Client\Model\FlxpointCustomFieldModel[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \OpenAPI\Client\Model\FlxpointCustomFieldModel[]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {

        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets variants
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryVariantModel[]|null
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryVariantModel[]|null $variants variants
     *
     * @return self
     */
    public function setVariants($variants)
    {

        if (is_null($variants)) {
            array_push($this->openAPINullablesSetToNull, 'variants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['variants'] = $variants;

        return $this;
    }

    /**
     * Gets category_one_id
     *
     * @return int|null
     */
    public function getCategoryOneId()
    {
        return $this->container['category_one_id'];
    }

    /**
     * Sets category_one_id
     *
     * @param int|null $category_one_id category_one_id
     *
     * @return self
     */
    public function setCategoryOneId($category_one_id)
    {

        if (is_null($category_one_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_one_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_one_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category_one_id'] = $category_one_id;

        return $this;
    }

    /**
     * Gets category_two_id
     *
     * @return int|null
     */
    public function getCategoryTwoId()
    {
        return $this->container['category_two_id'];
    }

    /**
     * Sets category_two_id
     *
     * @param int|null $category_two_id category_two_id
     *
     * @return self
     */
    public function setCategoryTwoId($category_two_id)
    {

        if (is_null($category_two_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_two_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_two_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category_two_id'] = $category_two_id;

        return $this;
    }

    /**
     * Gets category_three_id
     *
     * @return int|null
     */
    public function getCategoryThreeId()
    {
        return $this->container['category_three_id'];
    }

    /**
     * Sets category_three_id
     *
     * @param int|null $category_three_id category_three_id
     *
     * @return self
     */
    public function setCategoryThreeId($category_three_id)
    {

        if (is_null($category_three_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_three_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_three_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category_three_id'] = $category_three_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


