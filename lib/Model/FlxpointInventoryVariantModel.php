<?php
/**
 * FlxpointInventoryVariantModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FlxpointInventoryVariantModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FlxpointInventoryVariantModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FlxpointInventoryVariantModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'source_id' => 'int',
        'inventory_parent_id' => 'int',
        'supplier_variant_id' => 'string',
        'shipping_cost' => 'float',
        'dropship_fee' => 'float',
        'inventory_list_price' => 'float',
        'reference_identifier' => 'string',
        'inventory_variant_id' => 'string',
        'committed_quantity' => 'int',
        'incoming_quantity' => 'int',
        'quantity' => 'int',
        'total_quantity' => 'int',
        'id' => 'int',
        'account_id' => 'int',
        'sku' => 'string',
        'title' => 'string',
        'mpn' => 'string',
        'upc' => 'string',
        'ean' => 'string',
        'asin' => 'string',
        'msrp' => 'float',
        'map' => 'float',
        'weight' => 'float',
        'length' => 'float',
        'width' => 'float',
        'height' => 'float',
        'inserted_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'total_quantity_last_changed_at' => '\DateTime',
        'archived' => 'bool',
        'cost' => 'float',
        'weight_unit' => '\OpenAPI\Client\Model\FlxpointInventoryVariantModelWeightUnit',
        'dimension_unit' => '\OpenAPI\Client\Model\FlxpointInventoryVariantModelDimensionUnit',
        'dimensional_weight' => 'float',
        'images' => '\OpenAPI\Client\Model\FlxpointImageModel[]',
        'options' => '\OpenAPI\Client\Model\FlxpointOptionModel[]',
        'custom_aggregate_fields' => '\OpenAPI\Client\Model\FlxpointInventoryVariantCustomAggregateFieldModel[]',
        'parent' => '\OpenAPI\Client\Model\FlxpointInventoryVariantModelParent',
        'linked_product_variants' => '\OpenAPI\Client\Model\FlxpointLinkedProductVariant[]',
        'scheduled_to_delete_at' => '\DateTime',
        'custom_fields' => '\OpenAPI\Client\Model\FlxpointCustomFieldModel[]',
        'allow_backorders' => 'bool',
        'bin_location' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'source_id' => 'int32',
        'inventory_parent_id' => 'int32',
        'supplier_variant_id' => null,
        'shipping_cost' => 'decimal',
        'dropship_fee' => 'decimal',
        'inventory_list_price' => 'decimal',
        'reference_identifier' => null,
        'inventory_variant_id' => null,
        'committed_quantity' => 'int32',
        'incoming_quantity' => 'int32',
        'quantity' => 'int32',
        'total_quantity' => 'int32',
        'id' => 'int64',
        'account_id' => 'int32',
        'sku' => null,
        'title' => null,
        'mpn' => null,
        'upc' => null,
        'ean' => null,
        'asin' => null,
        'msrp' => 'decimal',
        'map' => 'decimal',
        'weight' => 'decimal',
        'length' => 'decimal',
        'width' => 'decimal',
        'height' => 'decimal',
        'inserted_at' => 'date-time',
        'updated_at' => 'date-time',
        'total_quantity_last_changed_at' => 'date-time',
        'archived' => null,
        'cost' => 'decimal',
        'weight_unit' => null,
        'dimension_unit' => null,
        'dimensional_weight' => 'decimal',
        'images' => null,
        'options' => null,
        'custom_aggregate_fields' => null,
        'parent' => null,
        'linked_product_variants' => null,
        'scheduled_to_delete_at' => 'date-time',
        'custom_fields' => null,
        'allow_backorders' => null,
        'bin_location' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'source_id' => false,
		'inventory_parent_id' => false,
		'supplier_variant_id' => true,
		'shipping_cost' => false,
		'dropship_fee' => false,
		'inventory_list_price' => false,
		'reference_identifier' => true,
		'inventory_variant_id' => true,
		'committed_quantity' => true,
		'incoming_quantity' => true,
		'quantity' => false,
		'total_quantity' => false,
		'id' => false,
		'account_id' => false,
		'sku' => true,
		'title' => true,
		'mpn' => true,
		'upc' => true,
		'ean' => true,
		'asin' => true,
		'msrp' => true,
		'map' => true,
		'weight' => true,
		'length' => true,
		'width' => true,
		'height' => true,
		'inserted_at' => false,
		'updated_at' => true,
		'total_quantity_last_changed_at' => true,
		'archived' => false,
		'cost' => true,
		'weight_unit' => true,
		'dimension_unit' => true,
		'dimensional_weight' => true,
		'images' => true,
		'options' => true,
		'custom_aggregate_fields' => true,
		'parent' => true,
		'linked_product_variants' => true,
		'scheduled_to_delete_at' => true,
		'custom_fields' => true,
		'allow_backorders' => false,
		'bin_location' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source_id' => 'sourceId',
        'inventory_parent_id' => 'inventoryParentId',
        'supplier_variant_id' => 'supplierVariantId',
        'shipping_cost' => 'shippingCost',
        'dropship_fee' => 'dropshipFee',
        'inventory_list_price' => 'inventoryListPrice',
        'reference_identifier' => 'referenceIdentifier',
        'inventory_variant_id' => 'inventoryVariantId',
        'committed_quantity' => 'committedQuantity',
        'incoming_quantity' => 'incomingQuantity',
        'quantity' => 'quantity',
        'total_quantity' => 'totalQuantity',
        'id' => 'id',
        'account_id' => 'accountId',
        'sku' => 'sku',
        'title' => 'title',
        'mpn' => 'mpn',
        'upc' => 'upc',
        'ean' => 'ean',
        'asin' => 'asin',
        'msrp' => 'msrp',
        'map' => 'map',
        'weight' => 'weight',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'inserted_at' => 'insertedAt',
        'updated_at' => 'updatedAt',
        'total_quantity_last_changed_at' => 'totalQuantityLastChangedAt',
        'archived' => 'archived',
        'cost' => 'cost',
        'weight_unit' => 'weightUnit',
        'dimension_unit' => 'dimensionUnit',
        'dimensional_weight' => 'dimensionalWeight',
        'images' => 'images',
        'options' => 'options',
        'custom_aggregate_fields' => 'customAggregateFields',
        'parent' => 'parent',
        'linked_product_variants' => 'linkedProductVariants',
        'scheduled_to_delete_at' => 'scheduledToDeleteAt',
        'custom_fields' => 'customFields',
        'allow_backorders' => 'allowBackorders',
        'bin_location' => 'binLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source_id' => 'setSourceId',
        'inventory_parent_id' => 'setInventoryParentId',
        'supplier_variant_id' => 'setSupplierVariantId',
        'shipping_cost' => 'setShippingCost',
        'dropship_fee' => 'setDropshipFee',
        'inventory_list_price' => 'setInventoryListPrice',
        'reference_identifier' => 'setReferenceIdentifier',
        'inventory_variant_id' => 'setInventoryVariantId',
        'committed_quantity' => 'setCommittedQuantity',
        'incoming_quantity' => 'setIncomingQuantity',
        'quantity' => 'setQuantity',
        'total_quantity' => 'setTotalQuantity',
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'sku' => 'setSku',
        'title' => 'setTitle',
        'mpn' => 'setMpn',
        'upc' => 'setUpc',
        'ean' => 'setEan',
        'asin' => 'setAsin',
        'msrp' => 'setMsrp',
        'map' => 'setMap',
        'weight' => 'setWeight',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'inserted_at' => 'setInsertedAt',
        'updated_at' => 'setUpdatedAt',
        'total_quantity_last_changed_at' => 'setTotalQuantityLastChangedAt',
        'archived' => 'setArchived',
        'cost' => 'setCost',
        'weight_unit' => 'setWeightUnit',
        'dimension_unit' => 'setDimensionUnit',
        'dimensional_weight' => 'setDimensionalWeight',
        'images' => 'setImages',
        'options' => 'setOptions',
        'custom_aggregate_fields' => 'setCustomAggregateFields',
        'parent' => 'setParent',
        'linked_product_variants' => 'setLinkedProductVariants',
        'scheduled_to_delete_at' => 'setScheduledToDeleteAt',
        'custom_fields' => 'setCustomFields',
        'allow_backorders' => 'setAllowBackorders',
        'bin_location' => 'setBinLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source_id' => 'getSourceId',
        'inventory_parent_id' => 'getInventoryParentId',
        'supplier_variant_id' => 'getSupplierVariantId',
        'shipping_cost' => 'getShippingCost',
        'dropship_fee' => 'getDropshipFee',
        'inventory_list_price' => 'getInventoryListPrice',
        'reference_identifier' => 'getReferenceIdentifier',
        'inventory_variant_id' => 'getInventoryVariantId',
        'committed_quantity' => 'getCommittedQuantity',
        'incoming_quantity' => 'getIncomingQuantity',
        'quantity' => 'getQuantity',
        'total_quantity' => 'getTotalQuantity',
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'sku' => 'getSku',
        'title' => 'getTitle',
        'mpn' => 'getMpn',
        'upc' => 'getUpc',
        'ean' => 'getEan',
        'asin' => 'getAsin',
        'msrp' => 'getMsrp',
        'map' => 'getMap',
        'weight' => 'getWeight',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'inserted_at' => 'getInsertedAt',
        'updated_at' => 'getUpdatedAt',
        'total_quantity_last_changed_at' => 'getTotalQuantityLastChangedAt',
        'archived' => 'getArchived',
        'cost' => 'getCost',
        'weight_unit' => 'getWeightUnit',
        'dimension_unit' => 'getDimensionUnit',
        'dimensional_weight' => 'getDimensionalWeight',
        'images' => 'getImages',
        'options' => 'getOptions',
        'custom_aggregate_fields' => 'getCustomAggregateFields',
        'parent' => 'getParent',
        'linked_product_variants' => 'getLinkedProductVariants',
        'scheduled_to_delete_at' => 'getScheduledToDeleteAt',
        'custom_fields' => 'getCustomFields',
        'allow_backorders' => 'getAllowBackorders',
        'bin_location' => 'getBinLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('inventory_parent_id', $data ?? [], null);
        $this->setIfExists('supplier_variant_id', $data ?? [], null);
        $this->setIfExists('shipping_cost', $data ?? [], null);
        $this->setIfExists('dropship_fee', $data ?? [], null);
        $this->setIfExists('inventory_list_price', $data ?? [], null);
        $this->setIfExists('reference_identifier', $data ?? [], null);
        $this->setIfExists('inventory_variant_id', $data ?? [], null);
        $this->setIfExists('committed_quantity', $data ?? [], null);
        $this->setIfExists('incoming_quantity', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('total_quantity', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('mpn', $data ?? [], null);
        $this->setIfExists('upc', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('asin', $data ?? [], null);
        $this->setIfExists('msrp', $data ?? [], null);
        $this->setIfExists('map', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('inserted_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('total_quantity_last_changed_at', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('dimension_unit', $data ?? [], null);
        $this->setIfExists('dimensional_weight', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('custom_aggregate_fields', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('linked_product_variants', $data ?? [], null);
        $this->setIfExists('scheduled_to_delete_at', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('allow_backorders', $data ?? [], null);
        $this->setIfExists('bin_location', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source_id
     *
     * @return int|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param int|null $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {

        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }

        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets inventory_parent_id
     *
     * @return int|null
     */
    public function getInventoryParentId()
    {
        return $this->container['inventory_parent_id'];
    }

    /**
     * Sets inventory_parent_id
     *
     * @param int|null $inventory_parent_id inventory_parent_id
     *
     * @return self
     */
    public function setInventoryParentId($inventory_parent_id)
    {

        if (is_null($inventory_parent_id)) {
            throw new \InvalidArgumentException('non-nullable inventory_parent_id cannot be null');
        }

        $this->container['inventory_parent_id'] = $inventory_parent_id;

        return $this;
    }

    /**
     * Gets supplier_variant_id
     *
     * @return string|null
     */
    public function getSupplierVariantId()
    {
        return $this->container['supplier_variant_id'];
    }

    /**
     * Sets supplier_variant_id
     *
     * @param string|null $supplier_variant_id supplier_variant_id
     *
     * @return self
     */
    public function setSupplierVariantId($supplier_variant_id)
    {

        if (is_null($supplier_variant_id)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_variant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_variant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['supplier_variant_id'] = $supplier_variant_id;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return float|null
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param float|null $shipping_cost shipping_cost
     *
     * @return self
     */
    public function setShippingCost($shipping_cost)
    {

        if (is_null($shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost cannot be null');
        }

        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets dropship_fee
     *
     * @return float|null
     */
    public function getDropshipFee()
    {
        return $this->container['dropship_fee'];
    }

    /**
     * Sets dropship_fee
     *
     * @param float|null $dropship_fee dropship_fee
     *
     * @return self
     */
    public function setDropshipFee($dropship_fee)
    {

        if (is_null($dropship_fee)) {
            throw new \InvalidArgumentException('non-nullable dropship_fee cannot be null');
        }

        $this->container['dropship_fee'] = $dropship_fee;

        return $this;
    }

    /**
     * Gets inventory_list_price
     *
     * @return float|null
     */
    public function getInventoryListPrice()
    {
        return $this->container['inventory_list_price'];
    }

    /**
     * Sets inventory_list_price
     *
     * @param float|null $inventory_list_price inventory_list_price
     *
     * @return self
     */
    public function setInventoryListPrice($inventory_list_price)
    {

        if (is_null($inventory_list_price)) {
            throw new \InvalidArgumentException('non-nullable inventory_list_price cannot be null');
        }

        $this->container['inventory_list_price'] = $inventory_list_price;

        return $this;
    }

    /**
     * Gets reference_identifier
     *
     * @return string|null
     */
    public function getReferenceIdentifier()
    {
        return $this->container['reference_identifier'];
    }

    /**
     * Sets reference_identifier
     *
     * @param string|null $reference_identifier reference_identifier
     *
     * @return self
     */
    public function setReferenceIdentifier($reference_identifier)
    {

        if (is_null($reference_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'reference_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['reference_identifier'] = $reference_identifier;

        return $this;
    }

    /**
     * Gets inventory_variant_id
     *
     * @return string|null
     */
    public function getInventoryVariantId()
    {
        return $this->container['inventory_variant_id'];
    }

    /**
     * Sets inventory_variant_id
     *
     * @param string|null $inventory_variant_id inventory_variant_id
     *
     * @return self
     */
    public function setInventoryVariantId($inventory_variant_id)
    {

        if (is_null($inventory_variant_id)) {
            array_push($this->openAPINullablesSetToNull, 'inventory_variant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inventory_variant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['inventory_variant_id'] = $inventory_variant_id;

        return $this;
    }

    /**
     * Gets committed_quantity
     *
     * @return int|null
     */
    public function getCommittedQuantity()
    {
        return $this->container['committed_quantity'];
    }

    /**
     * Sets committed_quantity
     *
     * @param int|null $committed_quantity committed_quantity
     *
     * @return self
     */
    public function setCommittedQuantity($committed_quantity)
    {

        if (is_null($committed_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'committed_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('committed_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['committed_quantity'] = $committed_quantity;

        return $this;
    }

    /**
     * Gets incoming_quantity
     *
     * @return int|null
     */
    public function getIncomingQuantity()
    {
        return $this->container['incoming_quantity'];
    }

    /**
     * Sets incoming_quantity
     *
     * @param int|null $incoming_quantity incoming_quantity
     *
     * @return self
     */
    public function setIncomingQuantity($incoming_quantity)
    {

        if (is_null($incoming_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'incoming_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoming_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['incoming_quantity'] = $incoming_quantity;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {

        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_quantity
     *
     * @return int|null
     */
    public function getTotalQuantity()
    {
        return $this->container['total_quantity'];
    }

    /**
     * Sets total_quantity
     *
     * @param int|null $total_quantity total_quantity
     *
     * @return self
     */
    public function setTotalQuantity($total_quantity)
    {

        if (is_null($total_quantity)) {
            throw new \InvalidArgumentException('non-nullable total_quantity cannot be null');
        }

        $this->container['total_quantity'] = $total_quantity;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {

        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn mpn
     *
     * @return self
     */
    public function setMpn($mpn)
    {

        if (is_null($mpn)) {
            array_push($this->openAPINullablesSetToNull, 'mpn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mpn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string|null
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string|null $upc upc
     *
     * @return self
     */
    public function setUpc($upc)
    {

        if (is_null($upc)) {
            array_push($this->openAPINullablesSetToNull, 'upc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {

        if (is_null($ean)) {
            array_push($this->openAPINullablesSetToNull, 'ean');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ean', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets asin
     *
     * @return string|null
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string|null $asin asin
     *
     * @return self
     */
    public function setAsin($asin)
    {

        if (is_null($asin)) {
            array_push($this->openAPINullablesSetToNull, 'asin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets msrp
     *
     * @return float|null
     */
    public function getMsrp()
    {
        return $this->container['msrp'];
    }

    /**
     * Sets msrp
     *
     * @param float|null $msrp msrp
     *
     * @return self
     */
    public function setMsrp($msrp)
    {

        if (is_null($msrp)) {
            array_push($this->openAPINullablesSetToNull, 'msrp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('msrp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['msrp'] = $msrp;

        return $this;
    }

    /**
     * Gets map
     *
     * @return float|null
     */
    public function getMap()
    {
        return $this->container['map'];
    }

    /**
     * Sets map
     *
     * @param float|null $map map
     *
     * @return self
     */
    public function setMap($map)
    {

        if (is_null($map)) {
            array_push($this->openAPINullablesSetToNull, 'map');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('map', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['map'] = $map;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {

        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {

        if (is_null($length)) {
            array_push($this->openAPINullablesSetToNull, 'length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width width
     *
     * @return self
     */
    public function setWidth($width)
    {

        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height height
     *
     * @return self
     */
    public function setHeight($height)
    {

        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets inserted_at
     *
     * @return \DateTime|null
     */
    public function getInsertedAt()
    {
        return $this->container['inserted_at'];
    }

    /**
     * Sets inserted_at
     *
     * @param \DateTime|null $inserted_at inserted_at
     *
     * @return self
     */
    public function setInsertedAt($inserted_at)
    {

        if (is_null($inserted_at)) {
            throw new \InvalidArgumentException('non-nullable inserted_at cannot be null');
        }

        $this->container['inserted_at'] = $inserted_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {

        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets total_quantity_last_changed_at
     *
     * @return \DateTime|null
     */
    public function getTotalQuantityLastChangedAt()
    {
        return $this->container['total_quantity_last_changed_at'];
    }

    /**
     * Sets total_quantity_last_changed_at
     *
     * @param \DateTime|null $total_quantity_last_changed_at total_quantity_last_changed_at
     *
     * @return self
     */
    public function setTotalQuantityLastChangedAt($total_quantity_last_changed_at)
    {

        if (is_null($total_quantity_last_changed_at)) {
            array_push($this->openAPINullablesSetToNull, 'total_quantity_last_changed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_quantity_last_changed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['total_quantity_last_changed_at'] = $total_quantity_last_changed_at;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {

        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }

        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {

        if (is_null($cost)) {
            array_push($this->openAPINullablesSetToNull, 'cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryVariantModelWeightUnit|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryVariantModelWeightUnit|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {

        if (is_null($weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets dimension_unit
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryVariantModelDimensionUnit|null
     */
    public function getDimensionUnit()
    {
        return $this->container['dimension_unit'];
    }

    /**
     * Sets dimension_unit
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryVariantModelDimensionUnit|null $dimension_unit dimension_unit
     *
     * @return self
     */
    public function setDimensionUnit($dimension_unit)
    {

        if (is_null($dimension_unit)) {
            array_push($this->openAPINullablesSetToNull, 'dimension_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimension_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['dimension_unit'] = $dimension_unit;

        return $this;
    }

    /**
     * Gets dimensional_weight
     *
     * @return float|null
     */
    public function getDimensionalWeight()
    {
        return $this->container['dimensional_weight'];
    }

    /**
     * Sets dimensional_weight
     *
     * @param float|null $dimensional_weight dimensional_weight
     *
     * @return self
     */
    public function setDimensionalWeight($dimensional_weight)
    {

        if (is_null($dimensional_weight)) {
            array_push($this->openAPINullablesSetToNull, 'dimensional_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimensional_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['dimensional_weight'] = $dimensional_weight;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\FlxpointImageModel[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\FlxpointImageModel[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {

        if (is_null($images)) {
            array_push($this->openAPINullablesSetToNull, 'images');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('images', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\FlxpointOptionModel[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\FlxpointOptionModel[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (is_null($options)) {
            array_push($this->openAPINullablesSetToNull, 'options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets custom_aggregate_fields
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryVariantCustomAggregateFieldModel[]|null
     */
    public function getCustomAggregateFields()
    {
        return $this->container['custom_aggregate_fields'];
    }

    /**
     * Sets custom_aggregate_fields
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryVariantCustomAggregateFieldModel[]|null $custom_aggregate_fields custom_aggregate_fields
     *
     * @return self
     */
    public function setCustomAggregateFields($custom_aggregate_fields)
    {

        if (is_null($custom_aggregate_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_aggregate_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_aggregate_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['custom_aggregate_fields'] = $custom_aggregate_fields;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \OpenAPI\Client\Model\FlxpointInventoryVariantModelParent|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \OpenAPI\Client\Model\FlxpointInventoryVariantModelParent|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {

        if (is_null($parent)) {
            array_push($this->openAPINullablesSetToNull, 'parent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets linked_product_variants
     *
     * @return \OpenAPI\Client\Model\FlxpointLinkedProductVariant[]|null
     */
    public function getLinkedProductVariants()
    {
        return $this->container['linked_product_variants'];
    }

    /**
     * Sets linked_product_variants
     *
     * @param \OpenAPI\Client\Model\FlxpointLinkedProductVariant[]|null $linked_product_variants linked_product_variants
     *
     * @return self
     */
    public function setLinkedProductVariants($linked_product_variants)
    {

        if (is_null($linked_product_variants)) {
            array_push($this->openAPINullablesSetToNull, 'linked_product_variants');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linked_product_variants', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['linked_product_variants'] = $linked_product_variants;

        return $this;
    }

    /**
     * Gets scheduled_to_delete_at
     *
     * @return \DateTime|null
     */
    public function getScheduledToDeleteAt()
    {
        return $this->container['scheduled_to_delete_at'];
    }

    /**
     * Sets scheduled_to_delete_at
     *
     * @param \DateTime|null $scheduled_to_delete_at scheduled_to_delete_at
     *
     * @return self
     */
    public function setScheduledToDeleteAt($scheduled_to_delete_at)
    {

        if (is_null($scheduled_to_delete_at)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_to_delete_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_to_delete_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['scheduled_to_delete_at'] = $scheduled_to_delete_at;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \OpenAPI\Client\Model\FlxpointCustomFieldModel[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \OpenAPI\Client\Model\FlxpointCustomFieldModel[]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {

        if (is_null($custom_fields)) {
            array_push($this->openAPINullablesSetToNull, 'custom_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets allow_backorders
     *
     * @return bool|null
     */
    public function getAllowBackorders()
    {
        return $this->container['allow_backorders'];
    }

    /**
     * Sets allow_backorders
     *
     * @param bool|null $allow_backorders allow_backorders
     *
     * @return self
     */
    public function setAllowBackorders($allow_backorders)
    {

        if (is_null($allow_backorders)) {
            throw new \InvalidArgumentException('non-nullable allow_backorders cannot be null');
        }

        $this->container['allow_backorders'] = $allow_backorders;

        return $this;
    }

    /**
     * Gets bin_location
     *
     * @return string|null
     */
    public function getBinLocation()
    {
        return $this->container['bin_location'];
    }

    /**
     * Sets bin_location
     *
     * @param string|null $bin_location bin_location
     *
     * @return self
     */
    public function setBinLocation($bin_location)
    {

        if (is_null($bin_location)) {
            array_push($this->openAPINullablesSetToNull, 'bin_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bin_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bin_location'] = $bin_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


