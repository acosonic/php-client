<?php
/**
 * ProductModelAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductModelAllOf Class Doc Comment
 *
 * @category Class
 * @description Contains full information about product.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductModelAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductModel_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shop' => 'OneOfShopInfoModel',
        'category' => 'OneOfCategoryModel',
        'google_category' => 'OneOfGoogleCategoryModel',
        'name' => 'string',
        'slug' => 'string',
        'manufacturer' => 'string',
        'meta_keywords' => 'string',
        'meta_description' => 'string',
        'canonical' => 'string',
        'page_type' => 'OneOfPageTypeModel',
        'page_content' => 'string',
        'anchor_links' => 'string',
        'intro_text' => 'string',
        'intro_image' => 'string',
        'upsell_text' => 'string',
        'sweep_text' => 'string',
        'enable_comments' => 'bool',
        'enable_upsell' => 'bool',
        'enable_intro' => 'bool',
        'enable_sweep' => 'bool',
        'provider' => 'OneOfProductProviderInfoModel',
        'provider_product_id' => 'int',
        'tax_code' => 'string',
        'tax_disabled' => 'bool',
        'attributes' => '\OpenAPI\Client\Model\ProductAttributeModel[]',
        'options' => '\OpenAPI\Client\Model\ProductOptionModel[]',
        'terms' => '\OpenAPI\Client\Model\ProductTermModel[]',
        'gifts' => '\OpenAPI\Client\Model\ProductInfoModel[]',
        'upsells' => '\OpenAPI\Client\Model\ProductInfoModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shop' => null,
        'category' => null,
        'google_category' => null,
        'name' => null,
        'slug' => null,
        'manufacturer' => null,
        'meta_keywords' => null,
        'meta_description' => null,
        'canonical' => null,
        'page_type' => null,
        'page_content' => null,
        'anchor_links' => null,
        'intro_text' => null,
        'intro_image' => null,
        'upsell_text' => null,
        'sweep_text' => null,
        'enable_comments' => null,
        'enable_upsell' => null,
        'enable_intro' => null,
        'enable_sweep' => null,
        'provider' => null,
        'provider_product_id' => 'int64',
        'tax_code' => null,
        'tax_disabled' => null,
        'attributes' => null,
        'options' => null,
        'terms' => null,
        'gifts' => null,
        'upsells' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shop' => true,
		'category' => true,
		'google_category' => true,
		'name' => true,
		'slug' => true,
		'manufacturer' => true,
		'meta_keywords' => true,
		'meta_description' => true,
		'canonical' => true,
		'page_type' => true,
		'page_content' => true,
		'anchor_links' => true,
		'intro_text' => true,
		'intro_image' => true,
		'upsell_text' => true,
		'sweep_text' => true,
		'enable_comments' => false,
		'enable_upsell' => false,
		'enable_intro' => false,
		'enable_sweep' => false,
		'provider' => true,
		'provider_product_id' => true,
		'tax_code' => true,
		'tax_disabled' => false,
		'attributes' => true,
		'options' => true,
		'terms' => true,
		'gifts' => true,
		'upsells' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shop' => 'shop',
        'category' => 'category',
        'google_category' => 'googleCategory',
        'name' => 'name',
        'slug' => 'slug',
        'manufacturer' => 'manufacturer',
        'meta_keywords' => 'metaKeywords',
        'meta_description' => 'metaDescription',
        'canonical' => 'canonical',
        'page_type' => 'pageType',
        'page_content' => 'pageContent',
        'anchor_links' => 'anchorLinks',
        'intro_text' => 'introText',
        'intro_image' => 'introImage',
        'upsell_text' => 'upsellText',
        'sweep_text' => 'sweepText',
        'enable_comments' => 'enableComments',
        'enable_upsell' => 'enableUpsell',
        'enable_intro' => 'enableIntro',
        'enable_sweep' => 'enableSweep',
        'provider' => 'provider',
        'provider_product_id' => 'providerProductId',
        'tax_code' => 'taxCode',
        'tax_disabled' => 'taxDisabled',
        'attributes' => 'attributes',
        'options' => 'options',
        'terms' => 'terms',
        'gifts' => 'gifts',
        'upsells' => 'upsells'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shop' => 'setShop',
        'category' => 'setCategory',
        'google_category' => 'setGoogleCategory',
        'name' => 'setName',
        'slug' => 'setSlug',
        'manufacturer' => 'setManufacturer',
        'meta_keywords' => 'setMetaKeywords',
        'meta_description' => 'setMetaDescription',
        'canonical' => 'setCanonical',
        'page_type' => 'setPageType',
        'page_content' => 'setPageContent',
        'anchor_links' => 'setAnchorLinks',
        'intro_text' => 'setIntroText',
        'intro_image' => 'setIntroImage',
        'upsell_text' => 'setUpsellText',
        'sweep_text' => 'setSweepText',
        'enable_comments' => 'setEnableComments',
        'enable_upsell' => 'setEnableUpsell',
        'enable_intro' => 'setEnableIntro',
        'enable_sweep' => 'setEnableSweep',
        'provider' => 'setProvider',
        'provider_product_id' => 'setProviderProductId',
        'tax_code' => 'setTaxCode',
        'tax_disabled' => 'setTaxDisabled',
        'attributes' => 'setAttributes',
        'options' => 'setOptions',
        'terms' => 'setTerms',
        'gifts' => 'setGifts',
        'upsells' => 'setUpsells'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shop' => 'getShop',
        'category' => 'getCategory',
        'google_category' => 'getGoogleCategory',
        'name' => 'getName',
        'slug' => 'getSlug',
        'manufacturer' => 'getManufacturer',
        'meta_keywords' => 'getMetaKeywords',
        'meta_description' => 'getMetaDescription',
        'canonical' => 'getCanonical',
        'page_type' => 'getPageType',
        'page_content' => 'getPageContent',
        'anchor_links' => 'getAnchorLinks',
        'intro_text' => 'getIntroText',
        'intro_image' => 'getIntroImage',
        'upsell_text' => 'getUpsellText',
        'sweep_text' => 'getSweepText',
        'enable_comments' => 'getEnableComments',
        'enable_upsell' => 'getEnableUpsell',
        'enable_intro' => 'getEnableIntro',
        'enable_sweep' => 'getEnableSweep',
        'provider' => 'getProvider',
        'provider_product_id' => 'getProviderProductId',
        'tax_code' => 'getTaxCode',
        'tax_disabled' => 'getTaxDisabled',
        'attributes' => 'getAttributes',
        'options' => 'getOptions',
        'terms' => 'getTerms',
        'gifts' => 'getGifts',
        'upsells' => 'getUpsells'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shop', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('google_category', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('meta_keywords', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('canonical', $data ?? [], null);
        $this->setIfExists('page_type', $data ?? [], null);
        $this->setIfExists('page_content', $data ?? [], null);
        $this->setIfExists('anchor_links', $data ?? [], null);
        $this->setIfExists('intro_text', $data ?? [], null);
        $this->setIfExists('intro_image', $data ?? [], null);
        $this->setIfExists('upsell_text', $data ?? [], null);
        $this->setIfExists('sweep_text', $data ?? [], null);
        $this->setIfExists('enable_comments', $data ?? [], null);
        $this->setIfExists('enable_upsell', $data ?? [], null);
        $this->setIfExists('enable_intro', $data ?? [], null);
        $this->setIfExists('enable_sweep', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('provider_product_id', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('tax_disabled', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('gifts', $data ?? [], null);
        $this->setIfExists('upsells', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shop
     *
     * @return OneOfShopInfoModel|null
     */
    public function getShop()
    {
        return $this->container['shop'];
    }

    /**
     * Sets shop
     *
     * @param OneOfShopInfoModel|null $shop Product shop.
     *
     * @return self
     */
    public function setShop($shop)
    {

        if (is_null($shop)) {
            array_push($this->openAPINullablesSetToNull, 'shop');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shop', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['shop'] = $shop;

        return $this;
    }

    /**
     * Gets category
     *
     * @return OneOfCategoryModel|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param OneOfCategoryModel|null $category Product category.
     *
     * @return self
     */
    public function setCategory($category)
    {

        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets google_category
     *
     * @return OneOfGoogleCategoryModel|null
     */
    public function getGoogleCategory()
    {
        return $this->container['google_category'];
    }

    /**
     * Sets google_category
     *
     * @param OneOfGoogleCategoryModel|null $google_category Product google category.
     *
     * @return self
     */
    public function setGoogleCategory($google_category)
    {

        if (is_null($google_category)) {
            array_push($this->openAPINullablesSetToNull, 'google_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['google_category'] = $google_category;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Product name.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug Product slug.
     *
     * @return self
     */
    public function setSlug($slug)
    {

        if (is_null($slug)) {
            array_push($this->openAPINullablesSetToNull, 'slug');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('slug', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer Product manufacturer.
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {

        if (is_null($manufacturer)) {
            array_push($this->openAPINullablesSetToNull, 'manufacturer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manufacturer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets meta_keywords
     *
     * @return string|null
     */
    public function getMetaKeywords()
    {
        return $this->container['meta_keywords'];
    }

    /**
     * Sets meta_keywords
     *
     * @param string|null $meta_keywords Product meta keywords.
     *
     * @return self
     */
    public function setMetaKeywords($meta_keywords)
    {

        if (is_null($meta_keywords)) {
            array_push($this->openAPINullablesSetToNull, 'meta_keywords');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_keywords', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['meta_keywords'] = $meta_keywords;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description Product meta description.
     *
     * @return self
     */
    public function setMetaDescription($meta_description)
    {

        if (is_null($meta_description)) {
            array_push($this->openAPINullablesSetToNull, 'meta_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets canonical
     *
     * @return string|null
     */
    public function getCanonical()
    {
        return $this->container['canonical'];
    }

    /**
     * Sets canonical
     *
     * @param string|null $canonical Product canonical.
     *
     * @return self
     */
    public function setCanonical($canonical)
    {

        if (is_null($canonical)) {
            array_push($this->openAPINullablesSetToNull, 'canonical');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('canonical', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['canonical'] = $canonical;

        return $this;
    }

    /**
     * Gets page_type
     *
     * @return OneOfPageTypeModel|null
     */
    public function getPageType()
    {
        return $this->container['page_type'];
    }

    /**
     * Sets page_type
     *
     * @param OneOfPageTypeModel|null $page_type Product page type.
     *
     * @return self
     */
    public function setPageType($page_type)
    {

        if (is_null($page_type)) {
            array_push($this->openAPINullablesSetToNull, 'page_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['page_type'] = $page_type;

        return $this;
    }

    /**
     * Gets page_content
     *
     * @return string|null
     */
    public function getPageContent()
    {
        return $this->container['page_content'];
    }

    /**
     * Sets page_content
     *
     * @param string|null $page_content Product page content.
     *
     * @return self
     */
    public function setPageContent($page_content)
    {

        if (is_null($page_content)) {
            array_push($this->openAPINullablesSetToNull, 'page_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['page_content'] = $page_content;

        return $this;
    }

    /**
     * Gets anchor_links
     *
     * @return string|null
     */
    public function getAnchorLinks()
    {
        return $this->container['anchor_links'];
    }

    /**
     * Sets anchor_links
     *
     * @param string|null $anchor_links Product anchor links.
     *
     * @return self
     */
    public function setAnchorLinks($anchor_links)
    {

        if (is_null($anchor_links)) {
            array_push($this->openAPINullablesSetToNull, 'anchor_links');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anchor_links', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['anchor_links'] = $anchor_links;

        return $this;
    }

    /**
     * Gets intro_text
     *
     * @return string|null
     */
    public function getIntroText()
    {
        return $this->container['intro_text'];
    }

    /**
     * Sets intro_text
     *
     * @param string|null $intro_text Product intro text.
     *
     * @return self
     */
    public function setIntroText($intro_text)
    {

        if (is_null($intro_text)) {
            array_push($this->openAPINullablesSetToNull, 'intro_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intro_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['intro_text'] = $intro_text;

        return $this;
    }

    /**
     * Gets intro_image
     *
     * @return string|null
     */
    public function getIntroImage()
    {
        return $this->container['intro_image'];
    }

    /**
     * Sets intro_image
     *
     * @param string|null $intro_image Product intro image.
     *
     * @return self
     */
    public function setIntroImage($intro_image)
    {

        if (is_null($intro_image)) {
            array_push($this->openAPINullablesSetToNull, 'intro_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intro_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['intro_image'] = $intro_image;

        return $this;
    }

    /**
     * Gets upsell_text
     *
     * @return string|null
     */
    public function getUpsellText()
    {
        return $this->container['upsell_text'];
    }

    /**
     * Sets upsell_text
     *
     * @param string|null $upsell_text Product upsell text.
     *
     * @return self
     */
    public function setUpsellText($upsell_text)
    {

        if (is_null($upsell_text)) {
            array_push($this->openAPINullablesSetToNull, 'upsell_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upsell_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['upsell_text'] = $upsell_text;

        return $this;
    }

    /**
     * Gets sweep_text
     *
     * @return string|null
     */
    public function getSweepText()
    {
        return $this->container['sweep_text'];
    }

    /**
     * Sets sweep_text
     *
     * @param string|null $sweep_text Product sweep text.
     *
     * @return self
     */
    public function setSweepText($sweep_text)
    {

        if (is_null($sweep_text)) {
            array_push($this->openAPINullablesSetToNull, 'sweep_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sweep_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sweep_text'] = $sweep_text;

        return $this;
    }

    /**
     * Gets enable_comments
     *
     * @return bool|null
     */
    public function getEnableComments()
    {
        return $this->container['enable_comments'];
    }

    /**
     * Sets enable_comments
     *
     * @param bool|null $enable_comments Indicates if comments are enabled for product.
     *
     * @return self
     */
    public function setEnableComments($enable_comments)
    {

        if (is_null($enable_comments)) {
            throw new \InvalidArgumentException('non-nullable enable_comments cannot be null');
        }

        $this->container['enable_comments'] = $enable_comments;

        return $this;
    }

    /**
     * Gets enable_upsell
     *
     * @return bool|null
     */
    public function getEnableUpsell()
    {
        return $this->container['enable_upsell'];
    }

    /**
     * Sets enable_upsell
     *
     * @param bool|null $enable_upsell Indicates if upsell is enabled for product.
     *
     * @return self
     */
    public function setEnableUpsell($enable_upsell)
    {

        if (is_null($enable_upsell)) {
            throw new \InvalidArgumentException('non-nullable enable_upsell cannot be null');
        }

        $this->container['enable_upsell'] = $enable_upsell;

        return $this;
    }

    /**
     * Gets enable_intro
     *
     * @return bool|null
     */
    public function getEnableIntro()
    {
        return $this->container['enable_intro'];
    }

    /**
     * Sets enable_intro
     *
     * @param bool|null $enable_intro Indicates if intro is enabled for product.
     *
     * @return self
     */
    public function setEnableIntro($enable_intro)
    {

        if (is_null($enable_intro)) {
            throw new \InvalidArgumentException('non-nullable enable_intro cannot be null');
        }

        $this->container['enable_intro'] = $enable_intro;

        return $this;
    }

    /**
     * Gets enable_sweep
     *
     * @return bool|null
     */
    public function getEnableSweep()
    {
        return $this->container['enable_sweep'];
    }

    /**
     * Sets enable_sweep
     *
     * @param bool|null $enable_sweep Indicates if sweep is enabled for product.
     *
     * @return self
     */
    public function setEnableSweep($enable_sweep)
    {

        if (is_null($enable_sweep)) {
            throw new \InvalidArgumentException('non-nullable enable_sweep cannot be null');
        }

        $this->container['enable_sweep'] = $enable_sweep;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return OneOfProductProviderInfoModel|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param OneOfProductProviderInfoModel|null $provider Product provider (dropshipping).
     *
     * @return self
     */
    public function setProvider($provider)
    {

        if (is_null($provider)) {
            array_push($this->openAPINullablesSetToNull, 'provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets provider_product_id
     *
     * @return int|null
     */
    public function getProviderProductId()
    {
        return $this->container['provider_product_id'];
    }

    /**
     * Sets provider_product_id
     *
     * @param int|null $provider_product_id Product ID from product provider.
     *
     * @return self
     */
    public function setProviderProductId($provider_product_id)
    {

        if (is_null($provider_product_id)) {
            array_push($this->openAPINullablesSetToNull, 'provider_product_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_product_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['provider_product_id'] = $provider_product_id;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code Defines tax code for this product. If not specified tax code from category will be used.
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {

        if (is_null($tax_code)) {
            array_push($this->openAPINullablesSetToNull, 'tax_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_disabled
     *
     * @return bool|null
     */
    public function getTaxDisabled()
    {
        return $this->container['tax_disabled'];
    }

    /**
     * Sets tax_disabled
     *
     * @param bool|null $tax_disabled Indicates if taxes are disabled for this product.
     *
     * @return self
     */
    public function setTaxDisabled($tax_disabled)
    {

        if (is_null($tax_disabled)) {
            throw new \InvalidArgumentException('non-nullable tax_disabled cannot be null');
        }

        $this->container['tax_disabled'] = $tax_disabled;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\ProductAttributeModel[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\ProductAttributeModel[]|null $attributes Product attributes.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {

        if (is_null($attributes)) {
            array_push($this->openAPINullablesSetToNull, 'attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\ProductOptionModel[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\ProductOptionModel[]|null $options Product options.
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (is_null($options)) {
            array_push($this->openAPINullablesSetToNull, 'options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \OpenAPI\Client\Model\ProductTermModel[]|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \OpenAPI\Client\Model\ProductTermModel[]|null $terms Product terms.
     *
     * @return self
     */
    public function setTerms($terms)
    {

        if (is_null($terms)) {
            array_push($this->openAPINullablesSetToNull, 'terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets gifts
     *
     * @return \OpenAPI\Client\Model\ProductInfoModel[]|null
     */
    public function getGifts()
    {
        return $this->container['gifts'];
    }

    /**
     * Sets gifts
     *
     * @param \OpenAPI\Client\Model\ProductInfoModel[]|null $gifts Gift products.
     *
     * @return self
     */
    public function setGifts($gifts)
    {

        if (is_null($gifts)) {
            array_push($this->openAPINullablesSetToNull, 'gifts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gifts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['gifts'] = $gifts;

        return $this;
    }

    /**
     * Gets upsells
     *
     * @return \OpenAPI\Client\Model\ProductInfoModel[]|null
     */
    public function getUpsells()
    {
        return $this->container['upsells'];
    }

    /**
     * Sets upsells
     *
     * @param \OpenAPI\Client\Model\ProductInfoModel[]|null $upsells Upsell products.
     *
     * @return self
     */
    public function setUpsells($upsells)
    {

        if (is_null($upsells)) {
            array_push($this->openAPINullablesSetToNull, 'upsells');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upsells', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['upsells'] = $upsells;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


