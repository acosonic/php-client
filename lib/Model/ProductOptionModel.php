<?php
/**
 * ProductOptionModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductOptionModel Class Doc Comment
 *
 * @category Class
 * @description Contains information about product option.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductOptionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductOptionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'is_enabled' => 'bool',
        'name' => 'string',
        'currency' => '\OpenAPI\Client\Model\ProductOptionInfoModelCurrency',
        'price' => 'float',
        'shipping_price_type' => '\OpenAPI\Client\Model\ProductOptionModelShippingPriceType',
        'shipping' => 'float',
        'shipping_next_item' => 'float',
        'is_selected' => 'bool',
        'sku' => 'string',
        'weight' => 'float',
        'weight_unit' => '\OpenAPI\Client\Model\ProductOptionInfoModelWeightUnit',
        'length' => 'float',
        'width' => 'float',
        'height' => 'float',
        'dimension_unit' => '\OpenAPI\Client\Model\ProductOptionInfoModelDimensionUnit',
        'provider_option_id' => 'int',
        'attributes' => '\OpenAPI\Client\Model\ProductAttributeModel[]',
        'images' => '\OpenAPI\Client\Model\ProductOptionImageModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'guid',
        'is_enabled' => null,
        'name' => null,
        'currency' => null,
        'price' => 'decimal',
        'shipping_price_type' => null,
        'shipping' => 'decimal',
        'shipping_next_item' => 'decimal',
        'is_selected' => null,
        'sku' => null,
        'weight' => 'decimal',
        'weight_unit' => null,
        'length' => 'decimal',
        'width' => 'decimal',
        'height' => 'decimal',
        'dimension_unit' => null,
        'provider_option_id' => 'int64',
        'attributes' => null,
        'images' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'is_enabled' => false,
		'name' => true,
		'currency' => true,
		'price' => false,
		'shipping_price_type' => false,
		'shipping' => false,
		'shipping_next_item' => true,
		'is_selected' => false,
		'sku' => true,
		'weight' => true,
		'weight_unit' => true,
		'length' => true,
		'width' => true,
		'height' => true,
		'dimension_unit' => true,
		'provider_option_id' => true,
		'attributes' => true,
		'images' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'is_enabled' => 'isEnabled',
        'name' => 'name',
        'currency' => 'currency',
        'price' => 'price',
        'shipping_price_type' => 'shippingPriceType',
        'shipping' => 'shipping',
        'shipping_next_item' => 'shippingNextItem',
        'is_selected' => 'isSelected',
        'sku' => 'sku',
        'weight' => 'weight',
        'weight_unit' => 'weightUnit',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'dimension_unit' => 'dimensionUnit',
        'provider_option_id' => 'providerOptionId',
        'attributes' => 'attributes',
        'images' => 'images'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_enabled' => 'setIsEnabled',
        'name' => 'setName',
        'currency' => 'setCurrency',
        'price' => 'setPrice',
        'shipping_price_type' => 'setShippingPriceType',
        'shipping' => 'setShipping',
        'shipping_next_item' => 'setShippingNextItem',
        'is_selected' => 'setIsSelected',
        'sku' => 'setSku',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'dimension_unit' => 'setDimensionUnit',
        'provider_option_id' => 'setProviderOptionId',
        'attributes' => 'setAttributes',
        'images' => 'setImages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_enabled' => 'getIsEnabled',
        'name' => 'getName',
        'currency' => 'getCurrency',
        'price' => 'getPrice',
        'shipping_price_type' => 'getShippingPriceType',
        'shipping' => 'getShipping',
        'shipping_next_item' => 'getShippingNextItem',
        'is_selected' => 'getIsSelected',
        'sku' => 'getSku',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'dimension_unit' => 'getDimensionUnit',
        'provider_option_id' => 'getProviderOptionId',
        'attributes' => 'getAttributes',
        'images' => 'getImages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('shipping_price_type', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('shipping_next_item', $data ?? [], null);
        $this->setIfExists('is_selected', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('weight_unit', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('dimension_unit', $data ?? [], null);
        $this->setIfExists('provider_option_id', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Product option ID.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled Indicates if product option is enabled.
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {

        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }

        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Product option name.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\ProductOptionInfoModelCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\ProductOptionInfoModelCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {

        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Product option price.
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets shipping_price_type
     *
     * @return \OpenAPI\Client\Model\ProductOptionModelShippingPriceType|null
     */
    public function getShippingPriceType()
    {
        return $this->container['shipping_price_type'];
    }

    /**
     * Sets shipping_price_type
     *
     * @param \OpenAPI\Client\Model\ProductOptionModelShippingPriceType|null $shipping_price_type shipping_price_type
     *
     * @return self
     */
    public function setShippingPriceType($shipping_price_type)
    {

        if (is_null($shipping_price_type)) {
            throw new \InvalidArgumentException('non-nullable shipping_price_type cannot be null');
        }

        $this->container['shipping_price_type'] = $shipping_price_type;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return float|null
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param float|null $shipping Product option shipping price.
     *
     * @return self
     */
    public function setShipping($shipping)
    {

        if (is_null($shipping)) {
            throw new \InvalidArgumentException('non-nullable shipping cannot be null');
        }

        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets shipping_next_item
     *
     * @return float|null
     */
    public function getShippingNextItem()
    {
        return $this->container['shipping_next_item'];
    }

    /**
     * Sets shipping_next_item
     *
     * @param float|null $shipping_next_item Shipping price modifier for next items (quantity > 1).
     *
     * @return self
     */
    public function setShippingNextItem($shipping_next_item)
    {

        if (is_null($shipping_next_item)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_next_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_next_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['shipping_next_item'] = $shipping_next_item;

        return $this;
    }

    /**
     * Gets is_selected
     *
     * @return bool|null
     */
    public function getIsSelected()
    {
        return $this->container['is_selected'];
    }

    /**
     * Sets is_selected
     *
     * @param bool|null $is_selected Indicates if option is selected as default.
     *
     * @return self
     */
    public function setIsSelected($is_selected)
    {

        if (is_null($is_selected)) {
            throw new \InvalidArgumentException('non-nullable is_selected cannot be null');
        }

        $this->container['is_selected'] = $is_selected;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Product option SKU.
     *
     * @return self
     */
    public function setSku($sku)
    {

        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight Product option wight.
     *
     * @return self
     */
    public function setWeight($weight)
    {

        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     *
     * @return \OpenAPI\Client\Model\ProductOptionInfoModelWeightUnit|null
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     *
     * @param \OpenAPI\Client\Model\ProductOptionInfoModelWeightUnit|null $weight_unit weight_unit
     *
     * @return self
     */
    public function setWeightUnit($weight_unit)
    {

        if (is_null($weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length Product option length.
     *
     * @return self
     */
    public function setLength($length)
    {

        if (is_null($length)) {
            array_push($this->openAPINullablesSetToNull, 'length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return float|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param float|null $width Product option width.
     *
     * @return self
     */
    public function setWidth($width)
    {

        if (is_null($width)) {
            array_push($this->openAPINullablesSetToNull, 'width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return float|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param float|null $height Product option height.
     *
     * @return self
     */
    public function setHeight($height)
    {

        if (is_null($height)) {
            array_push($this->openAPINullablesSetToNull, 'height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets dimension_unit
     *
     * @return \OpenAPI\Client\Model\ProductOptionInfoModelDimensionUnit|null
     */
    public function getDimensionUnit()
    {
        return $this->container['dimension_unit'];
    }

    /**
     * Sets dimension_unit
     *
     * @param \OpenAPI\Client\Model\ProductOptionInfoModelDimensionUnit|null $dimension_unit dimension_unit
     *
     * @return self
     */
    public function setDimensionUnit($dimension_unit)
    {

        if (is_null($dimension_unit)) {
            array_push($this->openAPINullablesSetToNull, 'dimension_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimension_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['dimension_unit'] = $dimension_unit;

        return $this;
    }

    /**
     * Gets provider_option_id
     *
     * @return int|null
     */
    public function getProviderOptionId()
    {
        return $this->container['provider_option_id'];
    }

    /**
     * Sets provider_option_id
     *
     * @param int|null $provider_option_id Product option ID from product provider.
     *
     * @return self
     */
    public function setProviderOptionId($provider_option_id)
    {

        if (is_null($provider_option_id)) {
            array_push($this->openAPINullablesSetToNull, 'provider_option_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_option_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['provider_option_id'] = $provider_option_id;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\ProductAttributeModel[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\ProductAttributeModel[]|null $attributes Product option attributes.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {

        if (is_null($attributes)) {
            array_push($this->openAPINullablesSetToNull, 'attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\ProductOptionImageModel[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\ProductOptionImageModel[]|null $images Product option images.
     *
     * @return self
     */
    public function setImages($images)
    {

        if (is_null($images)) {
            array_push($this->openAPINullablesSetToNull, 'images');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('images', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['images'] = $images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


