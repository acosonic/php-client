<?php
/**
 * ProductProviderImportUpdateFieldsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductProviderImportUpdateFieldsModel Class Doc Comment
 *
 * @category Class
 * @description Defines product fields that should be updated when updating existing product.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductProviderImportUpdateFieldsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductProviderImportUpdateFieldsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name_and_slug' => 'bool',
        'manufacturer' => 'bool',
        'page_content' => 'bool',
        'option_name' => 'bool',
        'option_price_and_shipping' => 'bool',
        'option_sku' => 'bool',
        'option_weight_and_dimensions' => 'bool',
        'option_attributes' => 'bool',
        'option_images' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name_and_slug' => null,
        'manufacturer' => null,
        'page_content' => null,
        'option_name' => null,
        'option_price_and_shipping' => null,
        'option_sku' => null,
        'option_weight_and_dimensions' => null,
        'option_attributes' => null,
        'option_images' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name_and_slug' => false,
		'manufacturer' => false,
		'page_content' => false,
		'option_name' => false,
		'option_price_and_shipping' => false,
		'option_sku' => false,
		'option_weight_and_dimensions' => false,
		'option_attributes' => false,
		'option_images' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name_and_slug' => 'nameAndSlug',
        'manufacturer' => 'manufacturer',
        'page_content' => 'pageContent',
        'option_name' => 'optionName',
        'option_price_and_shipping' => 'optionPriceAndShipping',
        'option_sku' => 'optionSku',
        'option_weight_and_dimensions' => 'optionWeightAndDimensions',
        'option_attributes' => 'optionAttributes',
        'option_images' => 'optionImages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name_and_slug' => 'setNameAndSlug',
        'manufacturer' => 'setManufacturer',
        'page_content' => 'setPageContent',
        'option_name' => 'setOptionName',
        'option_price_and_shipping' => 'setOptionPriceAndShipping',
        'option_sku' => 'setOptionSku',
        'option_weight_and_dimensions' => 'setOptionWeightAndDimensions',
        'option_attributes' => 'setOptionAttributes',
        'option_images' => 'setOptionImages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name_and_slug' => 'getNameAndSlug',
        'manufacturer' => 'getManufacturer',
        'page_content' => 'getPageContent',
        'option_name' => 'getOptionName',
        'option_price_and_shipping' => 'getOptionPriceAndShipping',
        'option_sku' => 'getOptionSku',
        'option_weight_and_dimensions' => 'getOptionWeightAndDimensions',
        'option_attributes' => 'getOptionAttributes',
        'option_images' => 'getOptionImages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name_and_slug', $data ?? [], true);
        $this->setIfExists('manufacturer', $data ?? [], true);
        $this->setIfExists('page_content', $data ?? [], true);
        $this->setIfExists('option_name', $data ?? [], true);
        $this->setIfExists('option_price_and_shipping', $data ?? [], true);
        $this->setIfExists('option_sku', $data ?? [], true);
        $this->setIfExists('option_weight_and_dimensions', $data ?? [], true);
        $this->setIfExists('option_attributes', $data ?? [], true);
        $this->setIfExists('option_images', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name_and_slug
     *
     * @return bool|null
     */
    public function getNameAndSlug()
    {
        return $this->container['name_and_slug'];
    }

    /**
     * Sets name_and_slug
     *
     * @param bool|null $name_and_slug name_and_slug
     *
     * @return self
     */
    public function setNameAndSlug($name_and_slug)
    {

        if (is_null($name_and_slug)) {
            throw new \InvalidArgumentException('non-nullable name_and_slug cannot be null');
        }

        $this->container['name_and_slug'] = $name_and_slug;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return bool|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param bool|null $manufacturer manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {

        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }

        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets page_content
     *
     * @return bool|null
     */
    public function getPageContent()
    {
        return $this->container['page_content'];
    }

    /**
     * Sets page_content
     *
     * @param bool|null $page_content page_content
     *
     * @return self
     */
    public function setPageContent($page_content)
    {

        if (is_null($page_content)) {
            throw new \InvalidArgumentException('non-nullable page_content cannot be null');
        }

        $this->container['page_content'] = $page_content;

        return $this;
    }

    /**
     * Gets option_name
     *
     * @return bool|null
     */
    public function getOptionName()
    {
        return $this->container['option_name'];
    }

    /**
     * Sets option_name
     *
     * @param bool|null $option_name option_name
     *
     * @return self
     */
    public function setOptionName($option_name)
    {

        if (is_null($option_name)) {
            throw new \InvalidArgumentException('non-nullable option_name cannot be null');
        }

        $this->container['option_name'] = $option_name;

        return $this;
    }

    /**
     * Gets option_price_and_shipping
     *
     * @return bool|null
     */
    public function getOptionPriceAndShipping()
    {
        return $this->container['option_price_and_shipping'];
    }

    /**
     * Sets option_price_and_shipping
     *
     * @param bool|null $option_price_and_shipping option_price_and_shipping
     *
     * @return self
     */
    public function setOptionPriceAndShipping($option_price_and_shipping)
    {

        if (is_null($option_price_and_shipping)) {
            throw new \InvalidArgumentException('non-nullable option_price_and_shipping cannot be null');
        }

        $this->container['option_price_and_shipping'] = $option_price_and_shipping;

        return $this;
    }

    /**
     * Gets option_sku
     *
     * @return bool|null
     */
    public function getOptionSku()
    {
        return $this->container['option_sku'];
    }

    /**
     * Sets option_sku
     *
     * @param bool|null $option_sku option_sku
     *
     * @return self
     */
    public function setOptionSku($option_sku)
    {

        if (is_null($option_sku)) {
            throw new \InvalidArgumentException('non-nullable option_sku cannot be null');
        }

        $this->container['option_sku'] = $option_sku;

        return $this;
    }

    /**
     * Gets option_weight_and_dimensions
     *
     * @return bool|null
     */
    public function getOptionWeightAndDimensions()
    {
        return $this->container['option_weight_and_dimensions'];
    }

    /**
     * Sets option_weight_and_dimensions
     *
     * @param bool|null $option_weight_and_dimensions option_weight_and_dimensions
     *
     * @return self
     */
    public function setOptionWeightAndDimensions($option_weight_and_dimensions)
    {

        if (is_null($option_weight_and_dimensions)) {
            throw new \InvalidArgumentException('non-nullable option_weight_and_dimensions cannot be null');
        }

        $this->container['option_weight_and_dimensions'] = $option_weight_and_dimensions;

        return $this;
    }

    /**
     * Gets option_attributes
     *
     * @return bool|null
     */
    public function getOptionAttributes()
    {
        return $this->container['option_attributes'];
    }

    /**
     * Sets option_attributes
     *
     * @param bool|null $option_attributes option_attributes
     *
     * @return self
     */
    public function setOptionAttributes($option_attributes)
    {

        if (is_null($option_attributes)) {
            throw new \InvalidArgumentException('non-nullable option_attributes cannot be null');
        }

        $this->container['option_attributes'] = $option_attributes;

        return $this;
    }

    /**
     * Gets option_images
     *
     * @return bool|null
     */
    public function getOptionImages()
    {
        return $this->container['option_images'];
    }

    /**
     * Sets option_images
     *
     * @param bool|null $option_images option_images
     *
     * @return self
     */
    public function setOptionImages($option_images)
    {

        if (is_null($option_images)) {
            throw new \InvalidArgumentException('non-nullable option_images cannot be null');
        }

        $this->container['option_images'] = $option_images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


