<?php
/**
 * ProductProviderTaskStateModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductProviderTaskStateModel Class Doc Comment
 *
 * @category Class
 * @description Contains information about product provider task state.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductProviderTaskStateModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductProviderTaskStateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'phase' => 'string',
        'total_products' => 'int',
        'total_options' => 'int',
        'products_processed' => 'int',
        'products_remaining' => 'int',
        'products_inserted' => 'int',
        'options_inserted' => 'int',
        'products_updated' => 'int',
        'options_updated' => 'int',
        'products_failed' => 'int',
        'products_archived' => 'int',
        'options_archived' => 'int',
        'average_milliseconds_per_product' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'phase' => null,
        'total_products' => 'int32',
        'total_options' => 'int32',
        'products_processed' => 'int32',
        'products_remaining' => 'int32',
        'products_inserted' => 'int32',
        'options_inserted' => 'int32',
        'products_updated' => 'int32',
        'options_updated' => 'int32',
        'products_failed' => 'int32',
        'products_archived' => 'int32',
        'options_archived' => 'int32',
        'average_milliseconds_per_product' => 'decimal'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'phase' => true,
		'total_products' => false,
		'total_options' => false,
		'products_processed' => false,
		'products_remaining' => false,
		'products_inserted' => false,
		'options_inserted' => false,
		'products_updated' => false,
		'options_updated' => false,
		'products_failed' => false,
		'products_archived' => false,
		'options_archived' => false,
		'average_milliseconds_per_product' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phase' => 'phase',
        'total_products' => 'totalProducts',
        'total_options' => 'totalOptions',
        'products_processed' => 'productsProcessed',
        'products_remaining' => 'productsRemaining',
        'products_inserted' => 'productsInserted',
        'options_inserted' => 'optionsInserted',
        'products_updated' => 'productsUpdated',
        'options_updated' => 'optionsUpdated',
        'products_failed' => 'productsFailed',
        'products_archived' => 'productsArchived',
        'options_archived' => 'optionsArchived',
        'average_milliseconds_per_product' => 'averageMillisecondsPerProduct'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phase' => 'setPhase',
        'total_products' => 'setTotalProducts',
        'total_options' => 'setTotalOptions',
        'products_processed' => 'setProductsProcessed',
        'products_remaining' => 'setProductsRemaining',
        'products_inserted' => 'setProductsInserted',
        'options_inserted' => 'setOptionsInserted',
        'products_updated' => 'setProductsUpdated',
        'options_updated' => 'setOptionsUpdated',
        'products_failed' => 'setProductsFailed',
        'products_archived' => 'setProductsArchived',
        'options_archived' => 'setOptionsArchived',
        'average_milliseconds_per_product' => 'setAverageMillisecondsPerProduct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phase' => 'getPhase',
        'total_products' => 'getTotalProducts',
        'total_options' => 'getTotalOptions',
        'products_processed' => 'getProductsProcessed',
        'products_remaining' => 'getProductsRemaining',
        'products_inserted' => 'getProductsInserted',
        'options_inserted' => 'getOptionsInserted',
        'products_updated' => 'getProductsUpdated',
        'options_updated' => 'getOptionsUpdated',
        'products_failed' => 'getProductsFailed',
        'products_archived' => 'getProductsArchived',
        'options_archived' => 'getOptionsArchived',
        'average_milliseconds_per_product' => 'getAverageMillisecondsPerProduct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('phase', $data ?? [], null);
        $this->setIfExists('total_products', $data ?? [], null);
        $this->setIfExists('total_options', $data ?? [], null);
        $this->setIfExists('products_processed', $data ?? [], null);
        $this->setIfExists('products_remaining', $data ?? [], null);
        $this->setIfExists('products_inserted', $data ?? [], null);
        $this->setIfExists('options_inserted', $data ?? [], null);
        $this->setIfExists('products_updated', $data ?? [], null);
        $this->setIfExists('options_updated', $data ?? [], null);
        $this->setIfExists('products_failed', $data ?? [], null);
        $this->setIfExists('products_archived', $data ?? [], null);
        $this->setIfExists('options_archived', $data ?? [], null);
        $this->setIfExists('average_milliseconds_per_product', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phase
     *
     * @return string|null
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param string|null $phase Current phase description.
     *
     * @return self
     */
    public function setPhase($phase)
    {

        if (is_null($phase)) {
            array_push($this->openAPINullablesSetToNull, 'phase');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets total_products
     *
     * @return int|null
     */
    public function getTotalProducts()
    {
        return $this->container['total_products'];
    }

    /**
     * Sets total_products
     *
     * @param int|null $total_products Total products fetched from product provider to process.
     *
     * @return self
     */
    public function setTotalProducts($total_products)
    {

        if (is_null($total_products)) {
            throw new \InvalidArgumentException('non-nullable total_products cannot be null');
        }

        $this->container['total_products'] = $total_products;

        return $this;
    }

    /**
     * Gets total_options
     *
     * @return int|null
     */
    public function getTotalOptions()
    {
        return $this->container['total_options'];
    }

    /**
     * Sets total_options
     *
     * @param int|null $total_options Total product options fetched from product provider to process.
     *
     * @return self
     */
    public function setTotalOptions($total_options)
    {

        if (is_null($total_options)) {
            throw new \InvalidArgumentException('non-nullable total_options cannot be null');
        }

        $this->container['total_options'] = $total_options;

        return $this;
    }

    /**
     * Gets products_processed
     *
     * @return int|null
     */
    public function getProductsProcessed()
    {
        return $this->container['products_processed'];
    }

    /**
     * Sets products_processed
     *
     * @param int|null $products_processed Products processed.
     *
     * @return self
     */
    public function setProductsProcessed($products_processed)
    {

        if (is_null($products_processed)) {
            throw new \InvalidArgumentException('non-nullable products_processed cannot be null');
        }

        $this->container['products_processed'] = $products_processed;

        return $this;
    }

    /**
     * Gets products_remaining
     *
     * @return int|null
     */
    public function getProductsRemaining()
    {
        return $this->container['products_remaining'];
    }

    /**
     * Sets products_remaining
     *
     * @param int|null $products_remaining Products remaining to process.
     *
     * @return self
     */
    public function setProductsRemaining($products_remaining)
    {

        if (is_null($products_remaining)) {
            throw new \InvalidArgumentException('non-nullable products_remaining cannot be null');
        }

        $this->container['products_remaining'] = $products_remaining;

        return $this;
    }

    /**
     * Gets products_inserted
     *
     * @return int|null
     */
    public function getProductsInserted()
    {
        return $this->container['products_inserted'];
    }

    /**
     * Sets products_inserted
     *
     * @param int|null $products_inserted Products inserted.
     *
     * @return self
     */
    public function setProductsInserted($products_inserted)
    {

        if (is_null($products_inserted)) {
            throw new \InvalidArgumentException('non-nullable products_inserted cannot be null');
        }

        $this->container['products_inserted'] = $products_inserted;

        return $this;
    }

    /**
     * Gets options_inserted
     *
     * @return int|null
     */
    public function getOptionsInserted()
    {
        return $this->container['options_inserted'];
    }

    /**
     * Sets options_inserted
     *
     * @param int|null $options_inserted Product options inserted.
     *
     * @return self
     */
    public function setOptionsInserted($options_inserted)
    {

        if (is_null($options_inserted)) {
            throw new \InvalidArgumentException('non-nullable options_inserted cannot be null');
        }

        $this->container['options_inserted'] = $options_inserted;

        return $this;
    }

    /**
     * Gets products_updated
     *
     * @return int|null
     */
    public function getProductsUpdated()
    {
        return $this->container['products_updated'];
    }

    /**
     * Sets products_updated
     *
     * @param int|null $products_updated Products updated.
     *
     * @return self
     */
    public function setProductsUpdated($products_updated)
    {

        if (is_null($products_updated)) {
            throw new \InvalidArgumentException('non-nullable products_updated cannot be null');
        }

        $this->container['products_updated'] = $products_updated;

        return $this;
    }

    /**
     * Gets options_updated
     *
     * @return int|null
     */
    public function getOptionsUpdated()
    {
        return $this->container['options_updated'];
    }

    /**
     * Sets options_updated
     *
     * @param int|null $options_updated Product options updated.
     *
     * @return self
     */
    public function setOptionsUpdated($options_updated)
    {

        if (is_null($options_updated)) {
            throw new \InvalidArgumentException('non-nullable options_updated cannot be null');
        }

        $this->container['options_updated'] = $options_updated;

        return $this;
    }

    /**
     * Gets products_failed
     *
     * @return int|null
     */
    public function getProductsFailed()
    {
        return $this->container['products_failed'];
    }

    /**
     * Sets products_failed
     *
     * @param int|null $products_failed Products failed to import.
     *
     * @return self
     */
    public function setProductsFailed($products_failed)
    {

        if (is_null($products_failed)) {
            throw new \InvalidArgumentException('non-nullable products_failed cannot be null');
        }

        $this->container['products_failed'] = $products_failed;

        return $this;
    }

    /**
     * Gets products_archived
     *
     * @return int|null
     */
    public function getProductsArchived()
    {
        return $this->container['products_archived'];
    }

    /**
     * Sets products_archived
     *
     * @param int|null $products_archived Products archived.
     *
     * @return self
     */
    public function setProductsArchived($products_archived)
    {

        if (is_null($products_archived)) {
            throw new \InvalidArgumentException('non-nullable products_archived cannot be null');
        }

        $this->container['products_archived'] = $products_archived;

        return $this;
    }

    /**
     * Gets options_archived
     *
     * @return int|null
     */
    public function getOptionsArchived()
    {
        return $this->container['options_archived'];
    }

    /**
     * Sets options_archived
     *
     * @param int|null $options_archived Product options archived.
     *
     * @return self
     */
    public function setOptionsArchived($options_archived)
    {

        if (is_null($options_archived)) {
            throw new \InvalidArgumentException('non-nullable options_archived cannot be null');
        }

        $this->container['options_archived'] = $options_archived;

        return $this;
    }

    /**
     * Gets average_milliseconds_per_product
     *
     * @return float|null
     */
    public function getAverageMillisecondsPerProduct()
    {
        return $this->container['average_milliseconds_per_product'];
    }

    /**
     * Sets average_milliseconds_per_product
     *
     * @param float|null $average_milliseconds_per_product Average time in milliseconds required to process single product.
     *
     * @return self
     */
    public function setAverageMillisecondsPerProduct($average_milliseconds_per_product)
    {

        if (is_null($average_milliseconds_per_product)) {
            array_push($this->openAPINullablesSetToNull, 'average_milliseconds_per_product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('average_milliseconds_per_product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['average_milliseconds_per_product'] = $average_milliseconds_per_product;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


