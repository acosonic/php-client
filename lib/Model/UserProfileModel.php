<?php
/**
 * UserProfileModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Domdistrict Shop API
 *
 * BUILD TIME: 2022-09-08 12:31:24  ENVIRONMENT: Staging (//config/appsettings-stg.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserProfileModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserProfileModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserProfileModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_time' => '\DateTime',
        'updated_time' => '\DateTime',
        'is_deleted' => 'bool',
        'is_enabled' => 'bool',
        'organization' => 'OneOfOrganizationInfoModel',
        'type' => 'OneOfUserTypeEnum',
        'is_admin' => 'bool',
        'has_password' => 'bool',
        'username' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'full_name' => 'string',
        'email' => 'string',
        'email_verified' => 'bool',
        'phone_number' => 'string',
        'facebook_id' => 'string',
        'google_id' => 'string',
        'photo_path' => 'string',
        'two_factor_auth' => 'OneOfTwoFactorAuthEnum',
        'active_verifications' => '\OpenAPI\Client\Model\ActiveVerificationModel[]',
        'organization_name' => 'string',
        'organization_owner' => 'string',
        'organization_address' => 'OneOfAddressModel',
        'organization_settings' => 'OneOfOrganizationSettingsModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'guid',
        'created_time' => 'date-time',
        'updated_time' => 'date-time',
        'is_deleted' => null,
        'is_enabled' => null,
        'organization' => null,
        'type' => null,
        'is_admin' => null,
        'has_password' => null,
        'username' => null,
        'first_name' => null,
        'last_name' => null,
        'full_name' => null,
        'email' => null,
        'email_verified' => null,
        'phone_number' => null,
        'facebook_id' => null,
        'google_id' => null,
        'photo_path' => null,
        'two_factor_auth' => null,
        'active_verifications' => null,
        'organization_name' => null,
        'organization_owner' => null,
        'organization_address' => null,
        'organization_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'created_time' => true,
		'updated_time' => true,
		'is_deleted' => true,
		'is_enabled' => true,
		'organization' => true,
		'type' => true,
		'is_admin' => false,
		'has_password' => false,
		'username' => true,
		'first_name' => true,
		'last_name' => true,
		'full_name' => true,
		'email' => true,
		'email_verified' => false,
		'phone_number' => true,
		'facebook_id' => true,
		'google_id' => true,
		'photo_path' => true,
		'two_factor_auth' => true,
		'active_verifications' => true,
		'organization_name' => true,
		'organization_owner' => true,
		'organization_address' => true,
		'organization_settings' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_time' => 'createdTime',
        'updated_time' => 'updatedTime',
        'is_deleted' => 'isDeleted',
        'is_enabled' => 'isEnabled',
        'organization' => 'organization',
        'type' => 'type',
        'is_admin' => 'isAdmin',
        'has_password' => 'hasPassword',
        'username' => 'username',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'full_name' => 'fullName',
        'email' => 'email',
        'email_verified' => 'emailVerified',
        'phone_number' => 'phoneNumber',
        'facebook_id' => 'facebookId',
        'google_id' => 'googleId',
        'photo_path' => 'photoPath',
        'two_factor_auth' => 'twoFactorAuth',
        'active_verifications' => 'activeVerifications',
        'organization_name' => 'organizationName',
        'organization_owner' => 'organizationOwner',
        'organization_address' => 'organizationAddress',
        'organization_settings' => 'organizationSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_time' => 'setCreatedTime',
        'updated_time' => 'setUpdatedTime',
        'is_deleted' => 'setIsDeleted',
        'is_enabled' => 'setIsEnabled',
        'organization' => 'setOrganization',
        'type' => 'setType',
        'is_admin' => 'setIsAdmin',
        'has_password' => 'setHasPassword',
        'username' => 'setUsername',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'full_name' => 'setFullName',
        'email' => 'setEmail',
        'email_verified' => 'setEmailVerified',
        'phone_number' => 'setPhoneNumber',
        'facebook_id' => 'setFacebookId',
        'google_id' => 'setGoogleId',
        'photo_path' => 'setPhotoPath',
        'two_factor_auth' => 'setTwoFactorAuth',
        'active_verifications' => 'setActiveVerifications',
        'organization_name' => 'setOrganizationName',
        'organization_owner' => 'setOrganizationOwner',
        'organization_address' => 'setOrganizationAddress',
        'organization_settings' => 'setOrganizationSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_time' => 'getCreatedTime',
        'updated_time' => 'getUpdatedTime',
        'is_deleted' => 'getIsDeleted',
        'is_enabled' => 'getIsEnabled',
        'organization' => 'getOrganization',
        'type' => 'getType',
        'is_admin' => 'getIsAdmin',
        'has_password' => 'getHasPassword',
        'username' => 'getUsername',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'full_name' => 'getFullName',
        'email' => 'getEmail',
        'email_verified' => 'getEmailVerified',
        'phone_number' => 'getPhoneNumber',
        'facebook_id' => 'getFacebookId',
        'google_id' => 'getGoogleId',
        'photo_path' => 'getPhotoPath',
        'two_factor_auth' => 'getTwoFactorAuth',
        'active_verifications' => 'getActiveVerifications',
        'organization_name' => 'getOrganizationName',
        'organization_owner' => 'getOrganizationOwner',
        'organization_address' => 'getOrganizationAddress',
        'organization_settings' => 'getOrganizationSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('updated_time', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('is_admin', $data ?? [], null);
        $this->setIfExists('has_password', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_verified', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('facebook_id', $data ?? [], null);
        $this->setIfExists('google_id', $data ?? [], null);
        $this->setIfExists('photo_path', $data ?? [], null);
        $this->setIfExists('two_factor_auth', $data ?? [], null);
        $this->setIfExists('active_verifications', $data ?? [], null);
        $this->setIfExists('organization_name', $data ?? [], null);
        $this->setIfExists('organization_owner', $data ?? [], null);
        $this->setIfExists('organization_address', $data ?? [], null);
        $this->setIfExists('organization_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The ID of the entity.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time The time when the entity was created.
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {

        if (is_null($created_time)) {
            array_push($this->openAPINullablesSetToNull, 'created_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return \DateTime|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param \DateTime|null $updated_time The last time when the entity was updated.
     *
     * @return self
     */
    public function setUpdatedTime($updated_time)
    {

        if (is_null($updated_time)) {
            array_push($this->openAPINullablesSetToNull, 'updated_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['updated_time'] = $updated_time;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted Indicates if the entity has been deleted.
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {

        if (is_null($is_deleted)) {
            array_push($this->openAPINullablesSetToNull, 'is_deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled Indicates if the entity is enabled.
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {

        if (is_null($is_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'is_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return OneOfOrganizationInfoModel|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param OneOfOrganizationInfoModel|null $organization Organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {

        if (is_null($organization)) {
            array_push($this->openAPINullablesSetToNull, 'organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets type
     *
     * @return OneOfUserTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param OneOfUserTypeEnum|null $type User type.
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_admin
     *
     * @return bool|null
     */
    public function getIsAdmin()
    {
        return $this->container['is_admin'];
    }

    /**
     * Sets is_admin
     *
     * @param bool|null $is_admin Indicates if user is administrator.
     *
     * @return self
     */
    public function setIsAdmin($is_admin)
    {

        if (is_null($is_admin)) {
            throw new \InvalidArgumentException('non-nullable is_admin cannot be null');
        }

        $this->container['is_admin'] = $is_admin;

        return $this;
    }

    /**
     * Gets has_password
     *
     * @return bool|null
     */
    public function getHasPassword()
    {
        return $this->container['has_password'];
    }

    /**
     * Sets has_password
     *
     * @param bool|null $has_password Indicates if user has password set.
     *
     * @return self
     */
    public function setHasPassword($has_password)
    {

        if (is_null($has_password)) {
            throw new \InvalidArgumentException('non-nullable has_password cannot be null');
        }

        $this->container['has_password'] = $has_password;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username First name
     *
     * @return self
     */
    public function setUsername($username)
    {

        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name First and last name
     *
     * @return self
     */
    public function setFullName($full_name)
    {

        if (is_null($full_name)) {
            array_push($this->openAPINullablesSetToNull, 'full_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email E-mail address.
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_verified
     *
     * @return bool|null
     */
    public function getEmailVerified()
    {
        return $this->container['email_verified'];
    }

    /**
     * Sets email_verified
     *
     * @param bool|null $email_verified Indicates if user email is verified.
     *
     * @return self
     */
    public function setEmailVerified($email_verified)
    {

        if (is_null($email_verified)) {
            throw new \InvalidArgumentException('non-nullable email_verified cannot be null');
        }

        $this->container['email_verified'] = $email_verified;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Phone number.
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {

        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets facebook_id
     *
     * @return string|null
     */
    public function getFacebookId()
    {
        return $this->container['facebook_id'];
    }

    /**
     * Sets facebook_id
     *
     * @param string|null $facebook_id Facebook ID.
     *
     * @return self
     */
    public function setFacebookId($facebook_id)
    {

        if (is_null($facebook_id)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['facebook_id'] = $facebook_id;

        return $this;
    }

    /**
     * Gets google_id
     *
     * @return string|null
     */
    public function getGoogleId()
    {
        return $this->container['google_id'];
    }

    /**
     * Sets google_id
     *
     * @param string|null $google_id Google ID.
     *
     * @return self
     */
    public function setGoogleId($google_id)
    {

        if (is_null($google_id)) {
            array_push($this->openAPINullablesSetToNull, 'google_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('google_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['google_id'] = $google_id;

        return $this;
    }

    /**
     * Gets photo_path
     *
     * @return string|null
     */
    public function getPhotoPath()
    {
        return $this->container['photo_path'];
    }

    /**
     * Sets photo_path
     *
     * @param string|null $photo_path Photo.
     *
     * @return self
     */
    public function setPhotoPath($photo_path)
    {

        if (is_null($photo_path)) {
            array_push($this->openAPINullablesSetToNull, 'photo_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['photo_path'] = $photo_path;

        return $this;
    }

    /**
     * Gets two_factor_auth
     *
     * @return OneOfTwoFactorAuthEnum|null
     */
    public function getTwoFactorAuth()
    {
        return $this->container['two_factor_auth'];
    }

    /**
     * Sets two_factor_auth
     *
     * @param OneOfTwoFactorAuthEnum|null $two_factor_auth Two factor authentication.
     *
     * @return self
     */
    public function setTwoFactorAuth($two_factor_auth)
    {

        if (is_null($two_factor_auth)) {
            array_push($this->openAPINullablesSetToNull, 'two_factor_auth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('two_factor_auth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['two_factor_auth'] = $two_factor_auth;

        return $this;
    }

    /**
     * Gets active_verifications
     *
     * @return \OpenAPI\Client\Model\ActiveVerificationModel[]|null
     */
    public function getActiveVerifications()
    {
        return $this->container['active_verifications'];
    }

    /**
     * Sets active_verifications
     *
     * @param \OpenAPI\Client\Model\ActiveVerificationModel[]|null $active_verifications Active email verification.
     *
     * @return self
     */
    public function setActiveVerifications($active_verifications)
    {

        if (is_null($active_verifications)) {
            array_push($this->openAPINullablesSetToNull, 'active_verifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_verifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['active_verifications'] = $active_verifications;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string|null $organization_name Organization name.
     *
     * @return self
     */
    public function setOrganizationName($organization_name)
    {

        if (is_null($organization_name)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets organization_owner
     *
     * @return string|null
     */
    public function getOrganizationOwner()
    {
        return $this->container['organization_owner'];
    }

    /**
     * Sets organization_owner
     *
     * @param string|null $organization_owner Organization name.
     *
     * @return self
     */
    public function setOrganizationOwner($organization_owner)
    {

        if (is_null($organization_owner)) {
            array_push($this->openAPINullablesSetToNull, 'organization_owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization_owner'] = $organization_owner;

        return $this;
    }

    /**
     * Gets organization_address
     *
     * @return OneOfAddressModel|null
     */
    public function getOrganizationAddress()
    {
        return $this->container['organization_address'];
    }

    /**
     * Sets organization_address
     *
     * @param OneOfAddressModel|null $organization_address Organization address.
     *
     * @return self
     */
    public function setOrganizationAddress($organization_address)
    {

        if (is_null($organization_address)) {
            array_push($this->openAPINullablesSetToNull, 'organization_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization_address'] = $organization_address;

        return $this;
    }

    /**
     * Gets organization_settings
     *
     * @return OneOfOrganizationSettingsModel|null
     */
    public function getOrganizationSettings()
    {
        return $this->container['organization_settings'];
    }

    /**
     * Sets organization_settings
     *
     * @param OneOfOrganizationSettingsModel|null $organization_settings Organization settings.
     *
     * @return self
     */
    public function setOrganizationSettings($organization_settings)
    {

        if (is_null($organization_settings)) {
            array_push($this->openAPINullablesSetToNull, 'organization_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization_settings'] = $organization_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


